
I2C_Sniffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e48  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08003fd8  08003fd8  00004fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004180  08004180  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004180  08004180  00005180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004188  08004188  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004188  08004188  00005188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800418c  0800418c  0000518c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004190  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006060  2**0
                  CONTENTS
 10 .bss          0000021c  20000060  20000060  00006060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000027c  2000027c  00006060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008ae2  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017c7  00000000  00000000  0000eb72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000718  00000000  00000000  00010340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000567  00000000  00000000  00010a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020445  00000000  00000000  00010fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009487  00000000  00000000  00031404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2e62  00000000  00000000  0003a88b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fd6ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002114  00000000  00000000  000fd730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  000ff844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003fc0 	.word	0x08003fc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08003fc0 	.word	0x08003fc0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800057a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057e:	2b00      	cmp	r3, #0
 8000580:	db0b      	blt.n	800059a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	f003 021f 	and.w	r2, r3, #31
 8000588:	4907      	ldr	r1, [pc, #28]	@ (80005a8 <__NVIC_EnableIRQ+0x38>)
 800058a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058e:	095b      	lsrs	r3, r3, #5
 8000590:	2001      	movs	r0, #1
 8000592:	fa00 f202 	lsl.w	r2, r0, r2
 8000596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	e000e100 	.word	0xe000e100

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	@ (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	@ (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <UART_Print>:
static void I2C_Sniffer_GPIO_EXTI_Init(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UART_Print(char *str) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit_DMA(&huart2, (uint8_t*)str, strlen(str));
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff fde1 	bl	80001d0 <strlen>
 800060e:	4603      	mov	r3, r0
 8000610:	b29b      	uxth	r3, r3
 8000612:	461a      	mov	r2, r3
 8000614:	6879      	ldr	r1, [r7, #4]
 8000616:	4803      	ldr	r0, [pc, #12]	@ (8000624 <UART_Print+0x24>)
 8000618:	f002 f81e 	bl	8002658 <HAL_UART_Transmit_DMA>
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000084 	.word	0x20000084

08000628 <I2C_Sniffer_GPIO_EXTI_Init>:


static void I2C_Sniffer_GPIO_EXTI_Init(void) {
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800062c:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <I2C_Sniffer_GPIO_EXTI_Init+0x90>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000630:	4a21      	ldr	r2, [pc, #132]	@ (80006b8 <I2C_Sniffer_GPIO_EXTI_Init+0x90>)
 8000632:	f043 0302 	orr.w	r3, r3, #2
 8000636:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000638:	4b1f      	ldr	r3, [pc, #124]	@ (80006b8 <I2C_Sniffer_GPIO_EXTI_Init+0x90>)
 800063a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800063c:	4a1e      	ldr	r2, [pc, #120]	@ (80006b8 <I2C_Sniffer_GPIO_EXTI_Init+0x90>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000642:	6453      	str	r3, [r2, #68]	@ 0x44

    I2C_SCL_PORT->MODER &= ~(GPIO_MODER_MODER6);
 8000644:	4b1d      	ldr	r3, [pc, #116]	@ (80006bc <I2C_Sniffer_GPIO_EXTI_Init+0x94>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a1c      	ldr	r2, [pc, #112]	@ (80006bc <I2C_Sniffer_GPIO_EXTI_Init+0x94>)
 800064a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800064e:	6013      	str	r3, [r2, #0]
    I2C_SDA_PORT->MODER &= ~(GPIO_MODER_MODER7);
 8000650:	4b1a      	ldr	r3, [pc, #104]	@ (80006bc <I2C_Sniffer_GPIO_EXTI_Init+0x94>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a19      	ldr	r2, [pc, #100]	@ (80006bc <I2C_Sniffer_GPIO_EXTI_Init+0x94>)
 8000656:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800065a:	6013      	str	r3, [r2, #0]

    I2C_SCL_PORT->PUPDR |= (1U << (I2C_SCL_PIN_POS * 2));
 800065c:	4b17      	ldr	r3, [pc, #92]	@ (80006bc <I2C_Sniffer_GPIO_EXTI_Init+0x94>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	4a16      	ldr	r2, [pc, #88]	@ (80006bc <I2C_Sniffer_GPIO_EXTI_Init+0x94>)
 8000662:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000666:	60d3      	str	r3, [r2, #12]
    I2C_SDA_PORT->PUPDR |= (1U << (I2C_SDA_PIN_POS * 2));
 8000668:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <I2C_Sniffer_GPIO_EXTI_Init+0x94>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	4a13      	ldr	r2, [pc, #76]	@ (80006bc <I2C_Sniffer_GPIO_EXTI_Init+0x94>)
 800066e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000672:	60d3      	str	r3, [r2, #12]

    SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI6_PB;
 8000674:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <I2C_Sniffer_GPIO_EXTI_Init+0x98>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	4a11      	ldr	r2, [pc, #68]	@ (80006c0 <I2C_Sniffer_GPIO_EXTI_Init+0x98>)
 800067a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800067e:	60d3      	str	r3, [r2, #12]

    EXTI->IMR |= (1U << I2C_SCL_PIN_POS);
 8000680:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <I2C_Sniffer_GPIO_EXTI_Init+0x9c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a0f      	ldr	r2, [pc, #60]	@ (80006c4 <I2C_Sniffer_GPIO_EXTI_Init+0x9c>)
 8000686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800068a:	6013      	str	r3, [r2, #0]
    EXTI->RTSR |= (1U << I2C_SCL_PIN_POS);
 800068c:	4b0d      	ldr	r3, [pc, #52]	@ (80006c4 <I2C_Sniffer_GPIO_EXTI_Init+0x9c>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	4a0c      	ldr	r2, [pc, #48]	@ (80006c4 <I2C_Sniffer_GPIO_EXTI_Init+0x9c>)
 8000692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000696:	6093      	str	r3, [r2, #8]
    EXTI->FTSR |= (1U << I2C_SCL_PIN_POS);
 8000698:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <I2C_Sniffer_GPIO_EXTI_Init+0x9c>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	4a09      	ldr	r2, [pc, #36]	@ (80006c4 <I2C_Sniffer_GPIO_EXTI_Init+0x9c>)
 800069e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006a2:	60d3      	str	r3, [r2, #12]

    NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006a4:	2017      	movs	r0, #23
 80006a6:	f7ff ff63 	bl	8000570 <__NVIC_EnableIRQ>
    NVIC_SetPriority(EXTI9_5_IRQn, 0);
 80006aa:	2100      	movs	r1, #0
 80006ac:	2017      	movs	r0, #23
 80006ae:	f7ff ff7d 	bl	80005ac <__NVIC_SetPriority>
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40020400 	.word	0x40020400
 80006c0:	40013800 	.word	0x40013800
 80006c4:	40013c00 	.word	0x40013c00

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006cc:	f000 fbfa 	bl	8000ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d0:	f000 f810 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d4:	f000 f8c2 	bl	800085c <MX_GPIO_Init>
  MX_DMA_Init();
 80006d8:	f000 f8a0 	bl	800081c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006dc:	f000 f874 	bl	80007c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  I2C_Sniffer_GPIO_EXTI_Init();
 80006e0:	f7ff ffa2 	bl	8000628 <I2C_Sniffer_GPIO_EXTI_Init>
  UART_Print("I2C Sniffer Started (Register-Level).\r\n");
 80006e4:	4802      	ldr	r0, [pc, #8]	@ (80006f0 <main+0x28>)
 80006e6:	f7ff ff8b 	bl	8000600 <UART_Print>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ea:	bf00      	nop
 80006ec:	e7fd      	b.n	80006ea <main+0x22>
 80006ee:	bf00      	nop
 80006f0:	08003fd8 	.word	0x08003fd8

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b094      	sub	sp, #80	@ 0x50
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	2230      	movs	r2, #48	@ 0x30
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f002 ffdc 	bl	80036c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	4b28      	ldr	r3, [pc, #160]	@ (80007c0 <SystemClock_Config+0xcc>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000720:	4a27      	ldr	r2, [pc, #156]	@ (80007c0 <SystemClock_Config+0xcc>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	@ 0x40
 8000728:	4b25      	ldr	r3, [pc, #148]	@ (80007c0 <SystemClock_Config+0xcc>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <SystemClock_Config+0xd0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a21      	ldr	r2, [pc, #132]	@ (80007c4 <SystemClock_Config+0xd0>)
 800073e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <SystemClock_Config+0xd0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000750:	2302      	movs	r3, #2
 8000752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2310      	movs	r3, #16
 800075a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2302      	movs	r3, #2
 800075e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000760:	2300      	movs	r3, #0
 8000762:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000764:	2308      	movs	r3, #8
 8000766:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000768:	23a8      	movs	r3, #168	@ 0xa8
 800076a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000770:	2304      	movs	r3, #4
 8000772:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000774:	f107 0320 	add.w	r3, r7, #32
 8000778:	4618      	mov	r0, r3
 800077a:	f001 fac5 	bl	8001d08 <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000784:	f000 fa38 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000788:	230f      	movs	r3, #15
 800078a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078c:	2302      	movs	r3, #2
 800078e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000794:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000798:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800079a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800079e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2105      	movs	r1, #5
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 fd26 	bl	80021f8 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007b2:	f000 fa21 	bl	8000bf8 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3750      	adds	r7, #80	@ 0x50
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000

080007c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007cc:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	@ (8000818 <MX_USART2_UART_Init+0x50>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007d2:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 8000800:	f001 feda 	bl	80025b8 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800080a:	f000 f9f5 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000084 	.word	0x20000084
 8000818:	40004400 	.word	0x40004400

0800081c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_DMA_Init+0x3c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a0b      	ldr	r2, [pc, #44]	@ (8000858 <MX_DMA_Init+0x3c>)
 800082c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_DMA_Init+0x3c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	2011      	movs	r0, #17
 8000844:	f000 fc8b 	bl	800115e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000848:	2011      	movs	r0, #17
 800084a:	f000 fca4 	bl	8001196 <HAL_NVIC_EnableIRQ>

}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_GPIO_Init+0x30>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a08      	ldr	r2, [pc, #32]	@ (800088c <MX_GPIO_Init+0x30>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b06      	ldr	r3, [pc, #24]	@ (800088c <MX_GPIO_Init+0x30>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800

08000890 <EXTI9_5_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI9_5_IRQHandler(void) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b09a      	sub	sp, #104	@ 0x68
 8000894:	af00      	add	r7, sp, #0

	if ((EXTI->PR & (1U << I2C_SCL_PIN_POS)) != 0) {
 8000896:	4baf      	ldr	r3, [pc, #700]	@ (8000b54 <EXTI9_5_IRQHandler+0x2c4>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800089e:	2b00      	cmp	r3, #0
 80008a0:	f000 819d 	beq.w	8000bde <EXTI9_5_IRQHandler+0x34e>
        EXTI->PR = (1U << I2C_SCL_PIN_POS);
 80008a4:	4bab      	ldr	r3, [pc, #684]	@ (8000b54 <EXTI9_5_IRQHandler+0x2c4>)
 80008a6:	2240      	movs	r2, #64	@ 0x40
 80008a8:	615a      	str	r2, [r3, #20]

        uint8_t scl_val = SCL_READ();
 80008aa:	4bab      	ldr	r3, [pc, #684]	@ (8000b58 <EXTI9_5_IRQHandler+0x2c8>)
 80008ac:	691b      	ldr	r3, [r3, #16]
 80008ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	bf14      	ite	ne
 80008b6:	2301      	movne	r3, #1
 80008b8:	2300      	moveq	r3, #0
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        uint8_t sda_val = SDA_READ();
 80008c0:	4ba5      	ldr	r3, [pc, #660]	@ (8000b58 <EXTI9_5_IRQHandler+0x2c8>)
 80008c2:	691b      	ldr	r3, [r3, #16]
 80008c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	bf14      	ite	ne
 80008cc:	2301      	movne	r3, #1
 80008ce:	2300      	moveq	r3, #0
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

        char msg[100];

        if (scl_val == 1 && sda_val == 1 && i2c_sniffer_state != I2C_SNIFFER_STATE_IDLE) {
 80008d6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d11e      	bne.n	800091c <EXTI9_5_IRQHandler+0x8c>
 80008de:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d11a      	bne.n	800091c <EXTI9_5_IRQHandler+0x8c>
 80008e6:	4b9d      	ldr	r3, [pc, #628]	@ (8000b5c <EXTI9_5_IRQHandler+0x2cc>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d015      	beq.n	800091c <EXTI9_5_IRQHandler+0x8c>
            sprintf(msg, "I2C STOP Condition detected.\r\n");
 80008f0:	463b      	mov	r3, r7
 80008f2:	499b      	ldr	r1, [pc, #620]	@ (8000b60 <EXTI9_5_IRQHandler+0x2d0>)
 80008f4:	4618      	mov	r0, r3
 80008f6:	f002 fec3 	bl	8003680 <siprintf>
            UART_Print(msg);
 80008fa:	463b      	mov	r3, r7
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fe7f 	bl	8000600 <UART_Print>
            i2c_sniffer_state = I2C_SNIFFER_STATE_IDLE;
 8000902:	4b96      	ldr	r3, [pc, #600]	@ (8000b5c <EXTI9_5_IRQHandler+0x2cc>)
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
            detected_register_address = 0xFF;
 8000908:	4b96      	ldr	r3, [pc, #600]	@ (8000b64 <EXTI9_5_IRQHandler+0x2d4>)
 800090a:	22ff      	movs	r2, #255	@ 0xff
 800090c:	701a      	strb	r2, [r3, #0]
            bit_counter = 0;
 800090e:	4b96      	ldr	r3, [pc, #600]	@ (8000b68 <EXTI9_5_IRQHandler+0x2d8>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
            current_byte_decoded = 0;
 8000914:	4b95      	ldr	r3, [pc, #596]	@ (8000b6c <EXTI9_5_IRQHandler+0x2dc>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
            return;
 800091a:	e160      	b.n	8000bde <EXTI9_5_IRQHandler+0x34e>
        }

        if (scl_val == 1 && sda_val == 0 && i2c_sniffer_state == I2C_SNIFFER_STATE_IDLE) {
 800091c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000920:	2b01      	cmp	r3, #1
 8000922:	d11e      	bne.n	8000962 <EXTI9_5_IRQHandler+0xd2>
 8000924:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000928:	2b00      	cmp	r3, #0
 800092a:	d11a      	bne.n	8000962 <EXTI9_5_IRQHandler+0xd2>
 800092c:	4b8b      	ldr	r3, [pc, #556]	@ (8000b5c <EXTI9_5_IRQHandler+0x2cc>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d115      	bne.n	8000962 <EXTI9_5_IRQHandler+0xd2>
            sprintf(msg, "\r\nI2C START Condition detected.\r\n");
 8000936:	463b      	mov	r3, r7
 8000938:	498d      	ldr	r1, [pc, #564]	@ (8000b70 <EXTI9_5_IRQHandler+0x2e0>)
 800093a:	4618      	mov	r0, r3
 800093c:	f002 fea0 	bl	8003680 <siprintf>
            UART_Print(msg);
 8000940:	463b      	mov	r3, r7
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fe5c 	bl	8000600 <UART_Print>
            i2c_sniffer_state = I2C_SNIFFER_STATE_START;
 8000948:	4b84      	ldr	r3, [pc, #528]	@ (8000b5c <EXTI9_5_IRQHandler+0x2cc>)
 800094a:	2201      	movs	r2, #1
 800094c:	701a      	strb	r2, [r3, #0]
            current_byte_decoded = 0;
 800094e:	4b87      	ldr	r3, [pc, #540]	@ (8000b6c <EXTI9_5_IRQHandler+0x2dc>)
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
            bit_counter = 0;
 8000954:	4b84      	ldr	r3, [pc, #528]	@ (8000b68 <EXTI9_5_IRQHandler+0x2d8>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
            detected_register_address = 0xFF;
 800095a:	4b82      	ldr	r3, [pc, #520]	@ (8000b64 <EXTI9_5_IRQHandler+0x2d4>)
 800095c:	22ff      	movs	r2, #255	@ 0xff
 800095e:	701a      	strb	r2, [r3, #0]
            return;
 8000960:	e13d      	b.n	8000bde <EXTI9_5_IRQHandler+0x34e>
        }


        switch (i2c_sniffer_state) {
 8000962:	4b7e      	ldr	r3, [pc, #504]	@ (8000b5c <EXTI9_5_IRQHandler+0x2cc>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b05      	cmp	r3, #5
 800096a:	f200 8138 	bhi.w	8000bde <EXTI9_5_IRQHandler+0x34e>
 800096e:	a201      	add	r2, pc, #4	@ (adr r2, 8000974 <EXTI9_5_IRQHandler+0xe4>)
 8000970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000974:	08000bdf 	.word	0x08000bdf
 8000978:	0800098d 	.word	0x0800098d
 800097c:	080009ab 	.word	0x080009ab
 8000980:	08000a35 	.word	0x08000a35
 8000984:	08000a73 	.word	0x08000a73
 8000988:	08000b41 	.word	0x08000b41
            case I2C_SNIFFER_STATE_IDLE:
                break;

            case I2C_SNIFFER_STATE_START:
                if (scl_val == 0) {
 800098c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000990:	2b00      	cmp	r3, #0
 8000992:	f040 811b 	bne.w	8000bcc <EXTI9_5_IRQHandler+0x33c>
                    i2c_sniffer_state = I2C_SNIFFER_STATE_ADDR_BYTE;
 8000996:	4b71      	ldr	r3, [pc, #452]	@ (8000b5c <EXTI9_5_IRQHandler+0x2cc>)
 8000998:	2202      	movs	r2, #2
 800099a:	701a      	strb	r2, [r3, #0]
                    current_byte_decoded = 0;
 800099c:	4b73      	ldr	r3, [pc, #460]	@ (8000b6c <EXTI9_5_IRQHandler+0x2dc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
                    bit_counter = 0;
 80009a2:	4b71      	ldr	r3, [pc, #452]	@ (8000b68 <EXTI9_5_IRQHandler+0x2d8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
                }
                break;
 80009a8:	e110      	b.n	8000bcc <EXTI9_5_IRQHandler+0x33c>

            case I2C_SNIFFER_STATE_ADDR_BYTE:
                if (scl_val == 1) {
 80009aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	f040 810e 	bne.w	8000bd0 <EXTI9_5_IRQHandler+0x340>
                    current_byte_decoded = (current_byte_decoded << 1) | sda_val;
 80009b4:	4b6d      	ldr	r3, [pc, #436]	@ (8000b6c <EXTI9_5_IRQHandler+0x2dc>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	b25a      	sxtb	r2, r3
 80009be:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 80009c2:	4313      	orrs	r3, r2
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	4b68      	ldr	r3, [pc, #416]	@ (8000b6c <EXTI9_5_IRQHandler+0x2dc>)
 80009ca:	701a      	strb	r2, [r3, #0]
                    bit_counter++;
 80009cc:	4b66      	ldr	r3, [pc, #408]	@ (8000b68 <EXTI9_5_IRQHandler+0x2d8>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	3301      	adds	r3, #1
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b64      	ldr	r3, [pc, #400]	@ (8000b68 <EXTI9_5_IRQHandler+0x2d8>)
 80009d8:	701a      	strb	r2, [r3, #0]
                    if (bit_counter == 8) { // 7 bits address + 1 bit R/W
 80009da:	4b63      	ldr	r3, [pc, #396]	@ (8000b68 <EXTI9_5_IRQHandler+0x2d8>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	2b08      	cmp	r3, #8
 80009e2:	f040 80f5 	bne.w	8000bd0 <EXTI9_5_IRQHandler+0x340>
                        detected_slave_address = (current_byte_decoded >> 1);
 80009e6:	4b61      	ldr	r3, [pc, #388]	@ (8000b6c <EXTI9_5_IRQHandler+0x2dc>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	085b      	lsrs	r3, r3, #1
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	4b60      	ldr	r3, [pc, #384]	@ (8000b74 <EXTI9_5_IRQHandler+0x2e4>)
 80009f2:	701a      	strb	r2, [r3, #0]
                        i2c_transfer_direction = (current_byte_decoded & 0x01); // 0 for write, 1 for read
 80009f4:	4b5d      	ldr	r3, [pc, #372]	@ (8000b6c <EXTI9_5_IRQHandler+0x2dc>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	4b5d      	ldr	r3, [pc, #372]	@ (8000b78 <EXTI9_5_IRQHandler+0x2e8>)
 8000a02:	701a      	strb	r2, [r3, #0]
                        sprintf(msg, "  Slave Addr: 0x%02X, Direction: %s\r\n",
 8000a04:	4b5b      	ldr	r3, [pc, #364]	@ (8000b74 <EXTI9_5_IRQHandler+0x2e4>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	461a      	mov	r2, r3
                                detected_slave_address,
                                (i2c_transfer_direction == 0) ? "WRITE" : "READ");
 8000a0c:	4b5a      	ldr	r3, [pc, #360]	@ (8000b78 <EXTI9_5_IRQHandler+0x2e8>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b2db      	uxtb	r3, r3
                        sprintf(msg, "  Slave Addr: 0x%02X, Direction: %s\r\n",
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d101      	bne.n	8000a1a <EXTI9_5_IRQHandler+0x18a>
 8000a16:	4b59      	ldr	r3, [pc, #356]	@ (8000b7c <EXTI9_5_IRQHandler+0x2ec>)
 8000a18:	e000      	b.n	8000a1c <EXTI9_5_IRQHandler+0x18c>
 8000a1a:	4b59      	ldr	r3, [pc, #356]	@ (8000b80 <EXTI9_5_IRQHandler+0x2f0>)
 8000a1c:	4638      	mov	r0, r7
 8000a1e:	4959      	ldr	r1, [pc, #356]	@ (8000b84 <EXTI9_5_IRQHandler+0x2f4>)
 8000a20:	f002 fe2e 	bl	8003680 <siprintf>
                        UART_Print(msg);
 8000a24:	463b      	mov	r3, r7
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fdea 	bl	8000600 <UART_Print>
                        i2c_sniffer_state = I2C_SNIFFER_STATE_ACK_NACK_AFTER_ADDR;
 8000a2c:	4b4b      	ldr	r3, [pc, #300]	@ (8000b5c <EXTI9_5_IRQHandler+0x2cc>)
 8000a2e:	2203      	movs	r2, #3
 8000a30:	701a      	strb	r2, [r3, #0]
                    }
                }
                break;
 8000a32:	e0cd      	b.n	8000bd0 <EXTI9_5_IRQHandler+0x340>

            case I2C_SNIFFER_STATE_ACK_NACK_AFTER_ADDR:
                if (scl_val == 0) {
 8000a34:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	f040 80cb 	bne.w	8000bd4 <EXTI9_5_IRQHandler+0x344>
                    sprintf(msg, "  ACK/NACK after Addr: %s\r\n", sda_val == 0 ? "ACK" : "NACK");
 8000a3e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d101      	bne.n	8000a4a <EXTI9_5_IRQHandler+0x1ba>
 8000a46:	4a50      	ldr	r2, [pc, #320]	@ (8000b88 <EXTI9_5_IRQHandler+0x2f8>)
 8000a48:	e000      	b.n	8000a4c <EXTI9_5_IRQHandler+0x1bc>
 8000a4a:	4a50      	ldr	r2, [pc, #320]	@ (8000b8c <EXTI9_5_IRQHandler+0x2fc>)
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	4950      	ldr	r1, [pc, #320]	@ (8000b90 <EXTI9_5_IRQHandler+0x300>)
 8000a50:	4618      	mov	r0, r3
 8000a52:	f002 fe15 	bl	8003680 <siprintf>
                    UART_Print(msg);
 8000a56:	463b      	mov	r3, r7
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fdd1 	bl	8000600 <UART_Print>

                    i2c_sniffer_state = I2C_SNIFFER_STATE_DATA_BYTE;
 8000a5e:	4b3f      	ldr	r3, [pc, #252]	@ (8000b5c <EXTI9_5_IRQHandler+0x2cc>)
 8000a60:	2204      	movs	r2, #4
 8000a62:	701a      	strb	r2, [r3, #0]
                    current_byte_decoded = 0;
 8000a64:	4b41      	ldr	r3, [pc, #260]	@ (8000b6c <EXTI9_5_IRQHandler+0x2dc>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	701a      	strb	r2, [r3, #0]
                    bit_counter = 0;
 8000a6a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b68 <EXTI9_5_IRQHandler+0x2d8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000a70:	e0b0      	b.n	8000bd4 <EXTI9_5_IRQHandler+0x344>

            case I2C_SNIFFER_STATE_DATA_BYTE:
                if (scl_val == 1) {
 8000a72:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	f040 80ae 	bne.w	8000bd8 <EXTI9_5_IRQHandler+0x348>
                    current_byte_decoded = (current_byte_decoded << 1) | sda_val;
 8000a7c:	4b3b      	ldr	r3, [pc, #236]	@ (8000b6c <EXTI9_5_IRQHandler+0x2dc>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	b25a      	sxtb	r2, r3
 8000a86:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	b25b      	sxtb	r3, r3
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b36      	ldr	r3, [pc, #216]	@ (8000b6c <EXTI9_5_IRQHandler+0x2dc>)
 8000a92:	701a      	strb	r2, [r3, #0]
                    bit_counter++;
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <EXTI9_5_IRQHandler+0x2d8>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4b32      	ldr	r3, [pc, #200]	@ (8000b68 <EXTI9_5_IRQHandler+0x2d8>)
 8000aa0:	701a      	strb	r2, [r3, #0]
                    if (bit_counter == 8) {
 8000aa2:	4b31      	ldr	r3, [pc, #196]	@ (8000b68 <EXTI9_5_IRQHandler+0x2d8>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	2b08      	cmp	r3, #8
 8000aaa:	f040 8095 	bne.w	8000bd8 <EXTI9_5_IRQHandler+0x348>
                        received_data_byte = current_byte_decoded;
 8000aae:	4b2f      	ldr	r3, [pc, #188]	@ (8000b6c <EXTI9_5_IRQHandler+0x2dc>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	4b37      	ldr	r3, [pc, #220]	@ (8000b94 <EXTI9_5_IRQHandler+0x304>)
 8000ab6:	701a      	strb	r2, [r3, #0]

                        if (i2c_transfer_direction == 0) {
 8000ab8:	4b2f      	ldr	r3, [pc, #188]	@ (8000b78 <EXTI9_5_IRQHandler+0x2e8>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d127      	bne.n	8000b12 <EXTI9_5_IRQHandler+0x282>
                            if (detected_register_address == 0xFF) {
 8000ac2:	4b28      	ldr	r3, [pc, #160]	@ (8000b64 <EXTI9_5_IRQHandler+0x2d4>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2bff      	cmp	r3, #255	@ 0xff
 8000aca:	d112      	bne.n	8000af2 <EXTI9_5_IRQHandler+0x262>
                                detected_register_address = received_data_byte;
 8000acc:	4b31      	ldr	r3, [pc, #196]	@ (8000b94 <EXTI9_5_IRQHandler+0x304>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4b24      	ldr	r3, [pc, #144]	@ (8000b64 <EXTI9_5_IRQHandler+0x2d4>)
 8000ad4:	701a      	strb	r2, [r3, #0]
                                sprintf(msg, "    Register Address: 0x%02X\r\n", detected_register_address);
 8000ad6:	4b23      	ldr	r3, [pc, #140]	@ (8000b64 <EXTI9_5_IRQHandler+0x2d4>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	461a      	mov	r2, r3
 8000ade:	463b      	mov	r3, r7
 8000ae0:	492d      	ldr	r1, [pc, #180]	@ (8000b98 <EXTI9_5_IRQHandler+0x308>)
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 fdcc 	bl	8003680 <siprintf>
                                UART_Print(msg);
 8000ae8:	463b      	mov	r3, r7
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fd88 	bl	8000600 <UART_Print>
 8000af0:	e01c      	b.n	8000b2c <EXTI9_5_IRQHandler+0x29c>
                            } else {
                                sprintf(msg, "    Data Written to 0x%02X: 0x%02X\r\n", detected_register_address, received_data_byte);
 8000af2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b64 <EXTI9_5_IRQHandler+0x2d4>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b26      	ldr	r3, [pc, #152]	@ (8000b94 <EXTI9_5_IRQHandler+0x304>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	4638      	mov	r0, r7
 8000b02:	4926      	ldr	r1, [pc, #152]	@ (8000b9c <EXTI9_5_IRQHandler+0x30c>)
 8000b04:	f002 fdbc 	bl	8003680 <siprintf>
                                UART_Print(msg);
 8000b08:	463b      	mov	r3, r7
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fd78 	bl	8000600 <UART_Print>
 8000b10:	e00c      	b.n	8000b2c <EXTI9_5_IRQHandler+0x29c>
                            }
                        } else {
                            sprintf(msg, "    Data Read from Slave: 0x%02X\r\n", received_data_byte);
 8000b12:	4b20      	ldr	r3, [pc, #128]	@ (8000b94 <EXTI9_5_IRQHandler+0x304>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	461a      	mov	r2, r3
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	4920      	ldr	r1, [pc, #128]	@ (8000ba0 <EXTI9_5_IRQHandler+0x310>)
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 fdae 	bl	8003680 <siprintf>
                            UART_Print(msg);
 8000b24:	463b      	mov	r3, r7
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fd6a 	bl	8000600 <UART_Print>
                        }
                        i2c_sniffer_state = I2C_SNIFFER_STATE_ACK_NACK_AFTER_DATA;
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <EXTI9_5_IRQHandler+0x2cc>)
 8000b2e:	2205      	movs	r2, #5
 8000b30:	701a      	strb	r2, [r3, #0]
                        bit_counter = 0;
 8000b32:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <EXTI9_5_IRQHandler+0x2d8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
                        current_byte_decoded = 0;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <EXTI9_5_IRQHandler+0x2dc>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
                    }
                }
                break;
 8000b3e:	e04b      	b.n	8000bd8 <EXTI9_5_IRQHandler+0x348>

            case I2C_SNIFFER_STATE_ACK_NACK_AFTER_DATA:

                if (scl_val == 0) {
 8000b40:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d149      	bne.n	8000bdc <EXTI9_5_IRQHandler+0x34c>
                    sprintf(msg, "  ACK/NACK after Data: %s\r\n", sda_val == 0 ? "ACK" : "NACK");
 8000b48:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d129      	bne.n	8000ba4 <EXTI9_5_IRQHandler+0x314>
 8000b50:	4a0d      	ldr	r2, [pc, #52]	@ (8000b88 <EXTI9_5_IRQHandler+0x2f8>)
 8000b52:	e028      	b.n	8000ba6 <EXTI9_5_IRQHandler+0x316>
 8000b54:	40013c00 	.word	0x40013c00
 8000b58:	40020400 	.word	0x40020400
 8000b5c:	2000007c 	.word	0x2000007c
 8000b60:	08004000 	.word	0x08004000
 8000b64:	20000000 	.word	0x20000000
 8000b68:	2000007e 	.word	0x2000007e
 8000b6c:	2000007d 	.word	0x2000007d
 8000b70:	08004020 	.word	0x08004020
 8000b74:	20000080 	.word	0x20000080
 8000b78:	2000007f 	.word	0x2000007f
 8000b7c:	08004044 	.word	0x08004044
 8000b80:	0800404c 	.word	0x0800404c
 8000b84:	08004054 	.word	0x08004054
 8000b88:	0800407c 	.word	0x0800407c
 8000b8c:	08004080 	.word	0x08004080
 8000b90:	08004088 	.word	0x08004088
 8000b94:	20000081 	.word	0x20000081
 8000b98:	080040a4 	.word	0x080040a4
 8000b9c:	080040c4 	.word	0x080040c4
 8000ba0:	080040ec 	.word	0x080040ec
 8000ba4:	4a0f      	ldr	r2, [pc, #60]	@ (8000be4 <EXTI9_5_IRQHandler+0x354>)
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	490f      	ldr	r1, [pc, #60]	@ (8000be8 <EXTI9_5_IRQHandler+0x358>)
 8000baa:	4618      	mov	r0, r3
 8000bac:	f002 fd68 	bl	8003680 <siprintf>
                    UART_Print(msg);
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fd24 	bl	8000600 <UART_Print>
                    i2c_sniffer_state = I2C_SNIFFER_STATE_DATA_BYTE;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <EXTI9_5_IRQHandler+0x35c>)
 8000bba:	2204      	movs	r2, #4
 8000bbc:	701a      	strb	r2, [r3, #0]
                    bit_counter = 0;
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <EXTI9_5_IRQHandler+0x360>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
                    current_byte_decoded = 0;
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <EXTI9_5_IRQHandler+0x364>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000bca:	e007      	b.n	8000bdc <EXTI9_5_IRQHandler+0x34c>
                break;
 8000bcc:	bf00      	nop
 8000bce:	e006      	b.n	8000bde <EXTI9_5_IRQHandler+0x34e>
                break;
 8000bd0:	bf00      	nop
 8000bd2:	e004      	b.n	8000bde <EXTI9_5_IRQHandler+0x34e>
                break;
 8000bd4:	bf00      	nop
 8000bd6:	e002      	b.n	8000bde <EXTI9_5_IRQHandler+0x34e>
                break;
 8000bd8:	bf00      	nop
 8000bda:	e000      	b.n	8000bde <EXTI9_5_IRQHandler+0x34e>
                break;
 8000bdc:	bf00      	nop
        }
    }
}
 8000bde:	3768      	adds	r7, #104	@ 0x68
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	08004080 	.word	0x08004080
 8000be8:	08004110 	.word	0x08004110
 8000bec:	2000007c 	.word	0x2000007c
 8000bf0:	2000007e 	.word	0x2000007e
 8000bf4:	2000007d 	.word	0x2000007d

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <Error_Handler+0x8>

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c12:	4a0f      	ldr	r2, [pc, #60]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	4a08      	ldr	r2, [pc, #32]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800

08000c54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	@ 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a34      	ldr	r2, [pc, #208]	@ (8000d44 <HAL_UART_MspInit+0xf0>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d161      	bne.n	8000d3a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	4b33      	ldr	r3, [pc, #204]	@ (8000d48 <HAL_UART_MspInit+0xf4>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7e:	4a32      	ldr	r2, [pc, #200]	@ (8000d48 <HAL_UART_MspInit+0xf4>)
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c86:	4b30      	ldr	r3, [pc, #192]	@ (8000d48 <HAL_UART_MspInit+0xf4>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b2c      	ldr	r3, [pc, #176]	@ (8000d48 <HAL_UART_MspInit+0xf4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	4a2b      	ldr	r2, [pc, #172]	@ (8000d48 <HAL_UART_MspInit+0xf4>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca2:	4b29      	ldr	r3, [pc, #164]	@ (8000d48 <HAL_UART_MspInit+0xf4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cae:	230c      	movs	r3, #12
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4820      	ldr	r0, [pc, #128]	@ (8000d4c <HAL_UART_MspInit+0xf8>)
 8000cca:	f000 fe81 	bl	80019d0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000cce:	4b20      	ldr	r3, [pc, #128]	@ (8000d50 <HAL_UART_MspInit+0xfc>)
 8000cd0:	4a20      	ldr	r2, [pc, #128]	@ (8000d54 <HAL_UART_MspInit+0x100>)
 8000cd2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d50 <HAL_UART_MspInit+0xfc>)
 8000cd6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000cda:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <HAL_UART_MspInit+0xfc>)
 8000cde:	2240      	movs	r2, #64	@ 0x40
 8000ce0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <HAL_UART_MspInit+0xfc>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ce8:	4b19      	ldr	r3, [pc, #100]	@ (8000d50 <HAL_UART_MspInit+0xfc>)
 8000cea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cf0:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <HAL_UART_MspInit+0xfc>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cf6:	4b16      	ldr	r3, [pc, #88]	@ (8000d50 <HAL_UART_MspInit+0xfc>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000cfc:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <HAL_UART_MspInit+0xfc>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d02:	4b13      	ldr	r3, [pc, #76]	@ (8000d50 <HAL_UART_MspInit+0xfc>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d08:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <HAL_UART_MspInit+0xfc>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000d0e:	4810      	ldr	r0, [pc, #64]	@ (8000d50 <HAL_UART_MspInit+0xfc>)
 8000d10:	f000 fa5c 	bl	80011cc <HAL_DMA_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000d1a:	f7ff ff6d 	bl	8000bf8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a0b      	ldr	r2, [pc, #44]	@ (8000d50 <HAL_UART_MspInit+0xfc>)
 8000d22:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d24:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <HAL_UART_MspInit+0xfc>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2026      	movs	r0, #38	@ 0x26
 8000d30:	f000 fa15 	bl	800115e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d34:	2026      	movs	r0, #38	@ 0x26
 8000d36:	f000 fa2e 	bl	8001196 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3728      	adds	r7, #40	@ 0x28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40004400 	.word	0x40004400
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020000 	.word	0x40020000
 8000d50:	200000cc 	.word	0x200000cc
 8000d54:	400260a0 	.word	0x400260a0

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <NMI_Handler+0x4>

08000d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <MemManage_Handler+0x4>

08000d70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dae:	f000 f8db 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000dbc:	4802      	ldr	r0, [pc, #8]	@ (8000dc8 <DMA1_Stream6_IRQHandler+0x10>)
 8000dbe:	f000 fb9d 	bl	80014fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200000cc 	.word	0x200000cc

08000dcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dd0:	4802      	ldr	r0, [pc, #8]	@ (8000ddc <USART2_IRQHandler+0x10>)
 8000dd2:	f001 fcb1 	bl	8002738 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000084 	.word	0x20000084

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	@ (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	@ (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f002 fc5e 	bl	80036d0 <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	@ (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20020000 	.word	0x20020000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	2000012c 	.word	0x2000012c
 8000e48:	20000280 	.word	0x20000280

08000e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	@ (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ea8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e74:	f7ff ffea 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e78:	480c      	ldr	r0, [pc, #48]	@ (8000eac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e7a:	490d      	ldr	r1, [pc, #52]	@ (8000eb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e90:	4c0a      	ldr	r4, [pc, #40]	@ (8000ebc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f002 fc1d 	bl	80036dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea2:	f7ff fc11 	bl	80006c8 <main>
  bx  lr    
 8000ea6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ea8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000eb4:	08004190 	.word	0x08004190
  ldr r2, =_sbss
 8000eb8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ebc:	2000027c 	.word	0x2000027c

08000ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f04 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f04 <HAL_Init+0x40>)
 8000ece:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <HAL_Init+0x40>)
 8000eda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	@ (8000f04 <HAL_Init+0x40>)
 8000ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f92b 	bl	8001148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef2:	200f      	movs	r0, #15
 8000ef4:	f000 f808 	bl	8000f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef8:	f7ff fe84 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023c00 	.word	0x40023c00

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <HAL_InitTick+0x54>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <HAL_InitTick+0x58>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f943 	bl	80011b2 <HAL_SYSTICK_Config>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00e      	b.n	8000f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d80a      	bhi.n	8000f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f000 f90b 	bl	800115e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f48:	4a06      	ldr	r2, [pc, #24]	@ (8000f64 <HAL_InitTick+0x5c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000004 	.word	0x20000004
 8000f60:	2000000c 	.word	0x2000000c
 8000f64:	20000008 	.word	0x20000008

08000f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <HAL_IncTick+0x20>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <HAL_IncTick+0x24>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <HAL_IncTick+0x24>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	2000000c 	.word	0x2000000c
 8000f8c:	20000130 	.word	0x20000130

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b03      	ldr	r3, [pc, #12]	@ (8000fa4 <HAL_GetTick+0x14>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000130 	.word	0x20000130

08000fa8 <__NVIC_SetPriorityGrouping>:
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fda:	4a04      	ldr	r2, [pc, #16]	@ (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	60d3      	str	r3, [r2, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_GetPriorityGrouping>:
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff4:	4b04      	ldr	r3, [pc, #16]	@ (8001008 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	f003 0307 	and.w	r3, r3, #7
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_EnableIRQ>:
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	2b00      	cmp	r3, #0
 800101c:	db0b      	blt.n	8001036 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f003 021f 	and.w	r2, r3, #31
 8001024:	4907      	ldr	r1, [pc, #28]	@ (8001044 <__NVIC_EnableIRQ+0x38>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	095b      	lsrs	r3, r3, #5
 800102c:	2001      	movs	r0, #1
 800102e:	fa00 f202 	lsl.w	r2, r0, r2
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000e100 	.word	0xe000e100

08001048 <__NVIC_SetPriority>:
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	2b00      	cmp	r3, #0
 800105a:	db0a      	blt.n	8001072 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	490c      	ldr	r1, [pc, #48]	@ (8001094 <__NVIC_SetPriority+0x4c>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	0112      	lsls	r2, r2, #4
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	440b      	add	r3, r1
 800106c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001070:	e00a      	b.n	8001088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4908      	ldr	r1, [pc, #32]	@ (8001098 <__NVIC_SetPriority+0x50>)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	3b04      	subs	r3, #4
 8001080:	0112      	lsls	r2, r2, #4
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	440b      	add	r3, r1
 8001086:	761a      	strb	r2, [r3, #24]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000e100 	.word	0xe000e100
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	@ 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f1c3 0307 	rsb	r3, r3, #7
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	bf28      	it	cs
 80010ba:	2304      	movcs	r3, #4
 80010bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3304      	adds	r3, #4
 80010c2:	2b06      	cmp	r3, #6
 80010c4:	d902      	bls.n	80010cc <NVIC_EncodePriority+0x30>
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3b03      	subs	r3, #3
 80010ca:	e000      	b.n	80010ce <NVIC_EncodePriority+0x32>
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43da      	mvns	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	401a      	ands	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e4:	f04f 31ff 	mov.w	r1, #4294967295
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	43d9      	mvns	r1, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	4313      	orrs	r3, r2
         );
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3724      	adds	r7, #36	@ 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001114:	d301      	bcc.n	800111a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001116:	2301      	movs	r3, #1
 8001118:	e00f      	b.n	800113a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111a:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <SysTick_Config+0x40>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001122:	210f      	movs	r1, #15
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f7ff ff8e 	bl	8001048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800112c:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <SysTick_Config+0x40>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001132:	4b04      	ldr	r3, [pc, #16]	@ (8001144 <SysTick_Config+0x40>)
 8001134:	2207      	movs	r2, #7
 8001136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	e000e010 	.word	0xe000e010

08001148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff29 	bl	8000fa8 <__NVIC_SetPriorityGrouping>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115e:	b580      	push	{r7, lr}
 8001160:	b086      	sub	sp, #24
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
 800116a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001170:	f7ff ff3e 	bl	8000ff0 <__NVIC_GetPriorityGrouping>
 8001174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	6978      	ldr	r0, [r7, #20]
 800117c:	f7ff ff8e 	bl	800109c <NVIC_EncodePriority>
 8001180:	4602      	mov	r2, r0
 8001182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff5d 	bl	8001048 <__NVIC_SetPriority>
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff31 	bl	800100c <__NVIC_EnableIRQ>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ffa2 	bl	8001104 <SysTick_Config>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff feda 	bl	8000f90 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e099      	b.n	800131c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2202      	movs	r2, #2
 80011ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0201 	bic.w	r2, r2, #1
 8001206:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001208:	e00f      	b.n	800122a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800120a:	f7ff fec1 	bl	8000f90 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b05      	cmp	r3, #5
 8001216:	d908      	bls.n	800122a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2220      	movs	r2, #32
 800121c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2203      	movs	r2, #3
 8001222:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e078      	b.n	800131c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1e8      	bne.n	800120a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	4b38      	ldr	r3, [pc, #224]	@ (8001324 <HAL_DMA_Init+0x158>)
 8001244:	4013      	ands	r3, r2
 8001246:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001256:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001262:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800126e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4313      	orrs	r3, r2
 800127a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001280:	2b04      	cmp	r3, #4
 8001282:	d107      	bne.n	8001294 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128c:	4313      	orrs	r3, r2
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4313      	orrs	r3, r2
 8001292:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f023 0307 	bic.w	r3, r3, #7
 80012aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	d117      	bne.n	80012ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00e      	beq.n	80012ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 fb01 	bl	80018d8 <DMA_CheckFifoParam>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2240      	movs	r2, #64	@ 0x40
 80012e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80012ea:	2301      	movs	r3, #1
 80012ec:	e016      	b.n	800131c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 fab8 	bl	800186c <DMA_CalcBaseAndBitshift>
 80012fc:	4603      	mov	r3, r0
 80012fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001304:	223f      	movs	r2, #63	@ 0x3f
 8001306:	409a      	lsls	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	f010803f 	.word	0xf010803f

08001328 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
 8001334:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001346:	2b01      	cmp	r3, #1
 8001348:	d101      	bne.n	800134e <HAL_DMA_Start_IT+0x26>
 800134a:	2302      	movs	r3, #2
 800134c:	e040      	b.n	80013d0 <HAL_DMA_Start_IT+0xa8>
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b01      	cmp	r3, #1
 8001360:	d12f      	bne.n	80013c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2202      	movs	r2, #2
 8001366:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 fa4a 	bl	8001810 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001380:	223f      	movs	r2, #63	@ 0x3f
 8001382:	409a      	lsls	r2, r3
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0216 	orr.w	r2, r2, #22
 8001396:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139c:	2b00      	cmp	r3, #0
 800139e:	d007      	beq.n	80013b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0208 	orr.w	r2, r2, #8
 80013ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0201 	orr.w	r2, r2, #1
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	e005      	b.n	80013ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013ca:	2302      	movs	r3, #2
 80013cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013e6:	f7ff fdd3 	bl	8000f90 <HAL_GetTick>
 80013ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d008      	beq.n	800140a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2280      	movs	r2, #128	@ 0x80
 80013fc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e052      	b.n	80014b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 0216 	bic.w	r2, r2, #22
 8001418:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	695a      	ldr	r2, [r3, #20]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001428:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	2b00      	cmp	r3, #0
 8001430:	d103      	bne.n	800143a <HAL_DMA_Abort+0x62>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001436:	2b00      	cmp	r3, #0
 8001438:	d007      	beq.n	800144a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0208 	bic.w	r2, r2, #8
 8001448:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0201 	bic.w	r2, r2, #1
 8001458:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800145a:	e013      	b.n	8001484 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800145c:	f7ff fd98 	bl	8000f90 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b05      	cmp	r3, #5
 8001468:	d90c      	bls.n	8001484 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2220      	movs	r2, #32
 800146e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2203      	movs	r2, #3
 8001474:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e015      	b.n	80014b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1e4      	bne.n	800145c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001496:	223f      	movs	r2, #63	@ 0x3f
 8001498:	409a      	lsls	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d004      	beq.n	80014d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2280      	movs	r2, #128	@ 0x80
 80014d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00c      	b.n	80014f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2205      	movs	r2, #5
 80014da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 0201 	bic.w	r2, r2, #1
 80014ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001508:	4b8e      	ldr	r3, [pc, #568]	@ (8001744 <HAL_DMA_IRQHandler+0x248>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a8e      	ldr	r2, [pc, #568]	@ (8001748 <HAL_DMA_IRQHandler+0x24c>)
 800150e:	fba2 2303 	umull	r2, r3, r2, r3
 8001512:	0a9b      	lsrs	r3, r3, #10
 8001514:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001526:	2208      	movs	r2, #8
 8001528:	409a      	lsls	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4013      	ands	r3, r2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d01a      	beq.n	8001568 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	2b00      	cmp	r3, #0
 800153e:	d013      	beq.n	8001568 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0204 	bic.w	r2, r2, #4
 800154e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001554:	2208      	movs	r2, #8
 8001556:	409a      	lsls	r2, r3
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001560:	f043 0201 	orr.w	r2, r3, #1
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800156c:	2201      	movs	r2, #1
 800156e:	409a      	lsls	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4013      	ands	r3, r2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d012      	beq.n	800159e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00b      	beq.n	800159e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800158a:	2201      	movs	r2, #1
 800158c:	409a      	lsls	r2, r3
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001596:	f043 0202 	orr.w	r2, r3, #2
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a2:	2204      	movs	r2, #4
 80015a4:	409a      	lsls	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4013      	ands	r3, r2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d012      	beq.n	80015d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00b      	beq.n	80015d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c0:	2204      	movs	r2, #4
 80015c2:	409a      	lsls	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015cc:	f043 0204 	orr.w	r2, r3, #4
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d8:	2210      	movs	r2, #16
 80015da:	409a      	lsls	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4013      	ands	r3, r2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d043      	beq.n	800166c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d03c      	beq.n	800166c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f6:	2210      	movs	r2, #16
 80015f8:	409a      	lsls	r2, r3
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d018      	beq.n	800163e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d108      	bne.n	800162c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	2b00      	cmp	r3, #0
 8001620:	d024      	beq.n	800166c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	4798      	blx	r3
 800162a:	e01f      	b.n	800166c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001630:	2b00      	cmp	r3, #0
 8001632:	d01b      	beq.n	800166c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	4798      	blx	r3
 800163c:	e016      	b.n	800166c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001648:	2b00      	cmp	r3, #0
 800164a:	d107      	bne.n	800165c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0208 	bic.w	r2, r2, #8
 800165a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001670:	2220      	movs	r2, #32
 8001672:	409a      	lsls	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4013      	ands	r3, r2
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 808f 	beq.w	800179c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0310 	and.w	r3, r3, #16
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 8087 	beq.w	800179c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001692:	2220      	movs	r2, #32
 8001694:	409a      	lsls	r2, r3
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b05      	cmp	r3, #5
 80016a4:	d136      	bne.n	8001714 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0216 	bic.w	r2, r2, #22
 80016b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	695a      	ldr	r2, [r3, #20]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d103      	bne.n	80016d6 <HAL_DMA_IRQHandler+0x1da>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d007      	beq.n	80016e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0208 	bic.w	r2, r2, #8
 80016e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ea:	223f      	movs	r2, #63	@ 0x3f
 80016ec:	409a      	lsls	r2, r3
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001706:	2b00      	cmp	r3, #0
 8001708:	d07e      	beq.n	8001808 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	4798      	blx	r3
        }
        return;
 8001712:	e079      	b.n	8001808 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d01d      	beq.n	800175e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10d      	bne.n	800174c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001734:	2b00      	cmp	r3, #0
 8001736:	d031      	beq.n	800179c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	4798      	blx	r3
 8001740:	e02c      	b.n	800179c <HAL_DMA_IRQHandler+0x2a0>
 8001742:	bf00      	nop
 8001744:	20000004 	.word	0x20000004
 8001748:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001750:	2b00      	cmp	r3, #0
 8001752:	d023      	beq.n	800179c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	4798      	blx	r3
 800175c:	e01e      	b.n	800179c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10f      	bne.n	800178c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0210 	bic.w	r2, r2, #16
 800177a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d032      	beq.n	800180a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d022      	beq.n	80017f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2205      	movs	r2, #5
 80017b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0201 	bic.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	3301      	adds	r3, #1
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d307      	bcc.n	80017e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f2      	bne.n	80017c8 <HAL_DMA_IRQHandler+0x2cc>
 80017e2:	e000      	b.n	80017e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80017e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d005      	beq.n	800180a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	4798      	blx	r3
 8001806:	e000      	b.n	800180a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001808:	bf00      	nop
    }
  }
}
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
 800181c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800182c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b40      	cmp	r3, #64	@ 0x40
 800183c:	d108      	bne.n	8001850 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800184e:	e007      	b.n	8001860 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	60da      	str	r2, [r3, #12]
}
 8001860:	bf00      	nop
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	3b10      	subs	r3, #16
 800187c:	4a14      	ldr	r2, [pc, #80]	@ (80018d0 <DMA_CalcBaseAndBitshift+0x64>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001886:	4a13      	ldr	r2, [pc, #76]	@ (80018d4 <DMA_CalcBaseAndBitshift+0x68>)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4413      	add	r3, r2
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b03      	cmp	r3, #3
 8001898:	d909      	bls.n	80018ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80018a2:	f023 0303 	bic.w	r3, r3, #3
 80018a6:	1d1a      	adds	r2, r3, #4
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80018ac:	e007      	b.n	80018be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80018b6:	f023 0303 	bic.w	r3, r3, #3
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	aaaaaaab 	.word	0xaaaaaaab
 80018d4:	08004144 	.word	0x08004144

080018d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d11f      	bne.n	8001932 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d856      	bhi.n	80019a6 <DMA_CheckFifoParam+0xce>
 80018f8:	a201      	add	r2, pc, #4	@ (adr r2, 8001900 <DMA_CheckFifoParam+0x28>)
 80018fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fe:	bf00      	nop
 8001900:	08001911 	.word	0x08001911
 8001904:	08001923 	.word	0x08001923
 8001908:	08001911 	.word	0x08001911
 800190c:	080019a7 	.word	0x080019a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001914:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d046      	beq.n	80019aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001920:	e043      	b.n	80019aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001926:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800192a:	d140      	bne.n	80019ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001930:	e03d      	b.n	80019ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800193a:	d121      	bne.n	8001980 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2b03      	cmp	r3, #3
 8001940:	d837      	bhi.n	80019b2 <DMA_CheckFifoParam+0xda>
 8001942:	a201      	add	r2, pc, #4	@ (adr r2, 8001948 <DMA_CheckFifoParam+0x70>)
 8001944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001948:	08001959 	.word	0x08001959
 800194c:	0800195f 	.word	0x0800195f
 8001950:	08001959 	.word	0x08001959
 8001954:	08001971 	.word	0x08001971
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
      break;
 800195c:	e030      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001962:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d025      	beq.n	80019b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800196e:	e022      	b.n	80019b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001974:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001978:	d11f      	bne.n	80019ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800197e:	e01c      	b.n	80019ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d903      	bls.n	800198e <DMA_CheckFifoParam+0xb6>
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	2b03      	cmp	r3, #3
 800198a:	d003      	beq.n	8001994 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800198c:	e018      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	73fb      	strb	r3, [r7, #15]
      break;
 8001992:	e015      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001998:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00e      	beq.n	80019be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
      break;
 80019a4:	e00b      	b.n	80019be <DMA_CheckFifoParam+0xe6>
      break;
 80019a6:	bf00      	nop
 80019a8:	e00a      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      break;
 80019aa:	bf00      	nop
 80019ac:	e008      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      break;
 80019ae:	bf00      	nop
 80019b0:	e006      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      break;
 80019b2:	bf00      	nop
 80019b4:	e004      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      break;
 80019b6:	bf00      	nop
 80019b8:	e002      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80019ba:	bf00      	nop
 80019bc:	e000      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      break;
 80019be:	bf00      	nop
    }
  } 
  
  return status; 
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop

080019d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	@ 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	e16b      	b.n	8001cc4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019ec:	2201      	movs	r2, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	f040 815a 	bne.w	8001cbe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d005      	beq.n	8001a22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d130      	bne.n	8001a84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a58:	2201      	movs	r2, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	091b      	lsrs	r3, r3, #4
 8001a6e:	f003 0201 	and.w	r2, r3, #1
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d017      	beq.n	8001ac0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d123      	bne.n	8001b14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	08da      	lsrs	r2, r3, #3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3208      	adds	r2, #8
 8001ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	08da      	lsrs	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3208      	adds	r2, #8
 8001b0e:	69b9      	ldr	r1, [r7, #24]
 8001b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	2203      	movs	r2, #3
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0203 	and.w	r2, r3, #3
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80b4 	beq.w	8001cbe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	4b60      	ldr	r3, [pc, #384]	@ (8001cdc <HAL_GPIO_Init+0x30c>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	4a5f      	ldr	r2, [pc, #380]	@ (8001cdc <HAL_GPIO_Init+0x30c>)
 8001b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b66:	4b5d      	ldr	r3, [pc, #372]	@ (8001cdc <HAL_GPIO_Init+0x30c>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b72:	4a5b      	ldr	r2, [pc, #364]	@ (8001ce0 <HAL_GPIO_Init+0x310>)
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3302      	adds	r3, #2
 8001b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	220f      	movs	r2, #15
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a52      	ldr	r2, [pc, #328]	@ (8001ce4 <HAL_GPIO_Init+0x314>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d02b      	beq.n	8001bf6 <HAL_GPIO_Init+0x226>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a51      	ldr	r2, [pc, #324]	@ (8001ce8 <HAL_GPIO_Init+0x318>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d025      	beq.n	8001bf2 <HAL_GPIO_Init+0x222>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a50      	ldr	r2, [pc, #320]	@ (8001cec <HAL_GPIO_Init+0x31c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d01f      	beq.n	8001bee <HAL_GPIO_Init+0x21e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4f      	ldr	r2, [pc, #316]	@ (8001cf0 <HAL_GPIO_Init+0x320>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d019      	beq.n	8001bea <HAL_GPIO_Init+0x21a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4e      	ldr	r2, [pc, #312]	@ (8001cf4 <HAL_GPIO_Init+0x324>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_GPIO_Init+0x216>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4d      	ldr	r2, [pc, #308]	@ (8001cf8 <HAL_GPIO_Init+0x328>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00d      	beq.n	8001be2 <HAL_GPIO_Init+0x212>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4c      	ldr	r2, [pc, #304]	@ (8001cfc <HAL_GPIO_Init+0x32c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d007      	beq.n	8001bde <HAL_GPIO_Init+0x20e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4b      	ldr	r2, [pc, #300]	@ (8001d00 <HAL_GPIO_Init+0x330>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d101      	bne.n	8001bda <HAL_GPIO_Init+0x20a>
 8001bd6:	2307      	movs	r3, #7
 8001bd8:	e00e      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bda:	2308      	movs	r3, #8
 8001bdc:	e00c      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bde:	2306      	movs	r3, #6
 8001be0:	e00a      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001be2:	2305      	movs	r3, #5
 8001be4:	e008      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001be6:	2304      	movs	r3, #4
 8001be8:	e006      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bea:	2303      	movs	r3, #3
 8001bec:	e004      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e002      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	69fa      	ldr	r2, [r7, #28]
 8001bfa:	f002 0203 	and.w	r2, r2, #3
 8001bfe:	0092      	lsls	r2, r2, #2
 8001c00:	4093      	lsls	r3, r2
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c08:	4935      	ldr	r1, [pc, #212]	@ (8001ce0 <HAL_GPIO_Init+0x310>)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	089b      	lsrs	r3, r3, #2
 8001c0e:	3302      	adds	r3, #2
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c16:	4b3b      	ldr	r3, [pc, #236]	@ (8001d04 <HAL_GPIO_Init+0x334>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c3a:	4a32      	ldr	r2, [pc, #200]	@ (8001d04 <HAL_GPIO_Init+0x334>)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c40:	4b30      	ldr	r3, [pc, #192]	@ (8001d04 <HAL_GPIO_Init+0x334>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c64:	4a27      	ldr	r2, [pc, #156]	@ (8001d04 <HAL_GPIO_Init+0x334>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c6a:	4b26      	ldr	r3, [pc, #152]	@ (8001d04 <HAL_GPIO_Init+0x334>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c8e:	4a1d      	ldr	r2, [pc, #116]	@ (8001d04 <HAL_GPIO_Init+0x334>)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c94:	4b1b      	ldr	r3, [pc, #108]	@ (8001d04 <HAL_GPIO_Init+0x334>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb8:	4a12      	ldr	r2, [pc, #72]	@ (8001d04 <HAL_GPIO_Init+0x334>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	61fb      	str	r3, [r7, #28]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	2b0f      	cmp	r3, #15
 8001cc8:	f67f ae90 	bls.w	80019ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	3724      	adds	r7, #36	@ 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40013800 	.word	0x40013800
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	40020400 	.word	0x40020400
 8001cec:	40020800 	.word	0x40020800
 8001cf0:	40020c00 	.word	0x40020c00
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40021400 	.word	0x40021400
 8001cfc:	40021800 	.word	0x40021800
 8001d00:	40021c00 	.word	0x40021c00
 8001d04:	40013c00 	.word	0x40013c00

08001d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e267      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d075      	beq.n	8001e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d26:	4b88      	ldr	r3, [pc, #544]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d00c      	beq.n	8001d4c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d32:	4b85      	ldr	r3, [pc, #532]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d112      	bne.n	8001d64 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d3e:	4b82      	ldr	r3, [pc, #520]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d4a:	d10b      	bne.n	8001d64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d05b      	beq.n	8001e10 <HAL_RCC_OscConfig+0x108>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d157      	bne.n	8001e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e242      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d6c:	d106      	bne.n	8001d7c <HAL_RCC_OscConfig+0x74>
 8001d6e:	4b76      	ldr	r3, [pc, #472]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a75      	ldr	r2, [pc, #468]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e01d      	b.n	8001db8 <HAL_RCC_OscConfig+0xb0>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0x98>
 8001d86:	4b70      	ldr	r3, [pc, #448]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a6f      	ldr	r2, [pc, #444]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	4b6d      	ldr	r3, [pc, #436]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a6c      	ldr	r2, [pc, #432]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e00b      	b.n	8001db8 <HAL_RCC_OscConfig+0xb0>
 8001da0:	4b69      	ldr	r3, [pc, #420]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a68      	ldr	r2, [pc, #416]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	4b66      	ldr	r3, [pc, #408]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a65      	ldr	r2, [pc, #404]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001db2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d013      	beq.n	8001de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f8e6 	bl	8000f90 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7ff f8e2 	bl	8000f90 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	@ 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e207      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	4b5b      	ldr	r3, [pc, #364]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0xc0>
 8001de6:	e014      	b.n	8001e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7ff f8d2 	bl	8000f90 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df0:	f7ff f8ce 	bl	8000f90 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	@ 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e1f3      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e02:	4b51      	ldr	r3, [pc, #324]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0xe8>
 8001e0e:	e000      	b.n	8001e12 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d063      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00b      	beq.n	8001e42 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e2a:	4b47      	ldr	r3, [pc, #284]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d11c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e36:	4b44      	ldr	r3, [pc, #272]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d116      	bne.n	8001e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e42:	4b41      	ldr	r3, [pc, #260]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <HAL_RCC_OscConfig+0x152>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d001      	beq.n	8001e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e1c7      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4937      	ldr	r1, [pc, #220]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6e:	e03a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d020      	beq.n	8001eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e78:	4b34      	ldr	r3, [pc, #208]	@ (8001f4c <HAL_RCC_OscConfig+0x244>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7e:	f7ff f887 	bl	8000f90 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e86:	f7ff f883 	bl	8000f90 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e1a8      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e98:	4b2b      	ldr	r3, [pc, #172]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea4:	4b28      	ldr	r3, [pc, #160]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4925      	ldr	r1, [pc, #148]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]
 8001eb8:	e015      	b.n	8001ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eba:	4b24      	ldr	r3, [pc, #144]	@ (8001f4c <HAL_RCC_OscConfig+0x244>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f866 	bl	8000f90 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec8:	f7ff f862 	bl	8000f90 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e187      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eda:	4b1b      	ldr	r3, [pc, #108]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d036      	beq.n	8001f60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d016      	beq.n	8001f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efa:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <HAL_RCC_OscConfig+0x248>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f00:	f7ff f846 	bl	8000f90 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f08:	f7ff f842 	bl	8000f90 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e167      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x200>
 8001f26:	e01b      	b.n	8001f60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f28:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <HAL_RCC_OscConfig+0x248>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2e:	f7ff f82f 	bl	8000f90 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f34:	e00e      	b.n	8001f54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f36:	f7ff f82b 	bl	8000f90 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d907      	bls.n	8001f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e150      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	42470000 	.word	0x42470000
 8001f50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f54:	4b88      	ldr	r3, [pc, #544]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8001f56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1ea      	bne.n	8001f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 8097 	beq.w	800209c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f72:	4b81      	ldr	r3, [pc, #516]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10f      	bne.n	8001f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	4b7d      	ldr	r3, [pc, #500]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	4a7c      	ldr	r2, [pc, #496]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8001f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8e:	4b7a      	ldr	r3, [pc, #488]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	4b77      	ldr	r3, [pc, #476]	@ (800217c <HAL_RCC_OscConfig+0x474>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d118      	bne.n	8001fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001faa:	4b74      	ldr	r3, [pc, #464]	@ (800217c <HAL_RCC_OscConfig+0x474>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a73      	ldr	r2, [pc, #460]	@ (800217c <HAL_RCC_OscConfig+0x474>)
 8001fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb6:	f7fe ffeb 	bl	8000f90 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fbe:	f7fe ffe7 	bl	8000f90 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e10c      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd0:	4b6a      	ldr	r3, [pc, #424]	@ (800217c <HAL_RCC_OscConfig+0x474>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d106      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x2ea>
 8001fe4:	4b64      	ldr	r3, [pc, #400]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe8:	4a63      	ldr	r2, [pc, #396]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ff0:	e01c      	b.n	800202c <HAL_RCC_OscConfig+0x324>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b05      	cmp	r3, #5
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0x30c>
 8001ffa:	4b5f      	ldr	r3, [pc, #380]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffe:	4a5e      	ldr	r2, [pc, #376]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	6713      	str	r3, [r2, #112]	@ 0x70
 8002006:	4b5c      	ldr	r3, [pc, #368]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8002008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800200a:	4a5b      	ldr	r2, [pc, #364]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6713      	str	r3, [r2, #112]	@ 0x70
 8002012:	e00b      	b.n	800202c <HAL_RCC_OscConfig+0x324>
 8002014:	4b58      	ldr	r3, [pc, #352]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002018:	4a57      	ldr	r2, [pc, #348]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 800201a:	f023 0301 	bic.w	r3, r3, #1
 800201e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002020:	4b55      	ldr	r3, [pc, #340]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002024:	4a54      	ldr	r2, [pc, #336]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8002026:	f023 0304 	bic.w	r3, r3, #4
 800202a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d015      	beq.n	8002060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002034:	f7fe ffac 	bl	8000f90 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203a:	e00a      	b.n	8002052 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203c:	f7fe ffa8 	bl	8000f90 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e0cb      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002052:	4b49      	ldr	r3, [pc, #292]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0ee      	beq.n	800203c <HAL_RCC_OscConfig+0x334>
 800205e:	e014      	b.n	800208a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002060:	f7fe ff96 	bl	8000f90 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002066:	e00a      	b.n	800207e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002068:	f7fe ff92 	bl	8000f90 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e0b5      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207e:	4b3e      	ldr	r3, [pc, #248]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8002080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1ee      	bne.n	8002068 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800208a:	7dfb      	ldrb	r3, [r7, #23]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d105      	bne.n	800209c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002090:	4b39      	ldr	r3, [pc, #228]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8002092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002094:	4a38      	ldr	r2, [pc, #224]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8002096:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800209a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80a1 	beq.w	80021e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020a6:	4b34      	ldr	r3, [pc, #208]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d05c      	beq.n	800216c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d141      	bne.n	800213e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ba:	4b31      	ldr	r3, [pc, #196]	@ (8002180 <HAL_RCC_OscConfig+0x478>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7fe ff66 	bl	8000f90 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c8:	f7fe ff62 	bl	8000f90 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e087      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020da:	4b27      	ldr	r3, [pc, #156]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69da      	ldr	r2, [r3, #28]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f4:	019b      	lsls	r3, r3, #6
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fc:	085b      	lsrs	r3, r3, #1
 80020fe:	3b01      	subs	r3, #1
 8002100:	041b      	lsls	r3, r3, #16
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002108:	061b      	lsls	r3, r3, #24
 800210a:	491b      	ldr	r1, [pc, #108]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002110:	4b1b      	ldr	r3, [pc, #108]	@ (8002180 <HAL_RCC_OscConfig+0x478>)
 8002112:	2201      	movs	r2, #1
 8002114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002116:	f7fe ff3b 	bl	8000f90 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211e:	f7fe ff37 	bl	8000f90 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e05c      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002130:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x416>
 800213c:	e054      	b.n	80021e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213e:	4b10      	ldr	r3, [pc, #64]	@ (8002180 <HAL_RCC_OscConfig+0x478>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7fe ff24 	bl	8000f90 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214c:	f7fe ff20 	bl	8000f90 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e045      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215e:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x444>
 800216a:	e03d      	b.n	80021e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d107      	bne.n	8002184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e038      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
 8002178:	40023800 	.word	0x40023800
 800217c:	40007000 	.word	0x40007000
 8002180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002184:	4b1b      	ldr	r3, [pc, #108]	@ (80021f4 <HAL_RCC_OscConfig+0x4ec>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d028      	beq.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800219c:	429a      	cmp	r2, r3
 800219e:	d121      	bne.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d11a      	bne.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021b4:	4013      	ands	r3, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021bc:	4293      	cmp	r3, r2
 80021be:	d111      	bne.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ca:	085b      	lsrs	r3, r3, #1
 80021cc:	3b01      	subs	r3, #1
 80021ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d107      	bne.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e000      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800

080021f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0cc      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800220c:	4b68      	ldr	r3, [pc, #416]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d90c      	bls.n	8002234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b65      	ldr	r3, [pc, #404]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002222:	4b63      	ldr	r3, [pc, #396]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0b8      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d020      	beq.n	8002282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800224c:	4b59      	ldr	r3, [pc, #356]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4a58      	ldr	r2, [pc, #352]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002256:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002264:	4b53      	ldr	r3, [pc, #332]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a52      	ldr	r2, [pc, #328]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800226e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002270:	4b50      	ldr	r3, [pc, #320]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	494d      	ldr	r1, [pc, #308]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	4313      	orrs	r3, r2
 8002280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d044      	beq.n	8002318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d107      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	4b47      	ldr	r3, [pc, #284]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d119      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e07f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d003      	beq.n	80022b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b6:	4b3f      	ldr	r3, [pc, #252]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e06f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c6:	4b3b      	ldr	r3, [pc, #236]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e067      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d6:	4b37      	ldr	r3, [pc, #220]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f023 0203 	bic.w	r2, r3, #3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4934      	ldr	r1, [pc, #208]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e8:	f7fe fe52 	bl	8000f90 <HAL_GetTick>
 80022ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f0:	f7fe fe4e 	bl	8000f90 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e04f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	4b2b      	ldr	r3, [pc, #172]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 020c 	and.w	r2, r3, #12
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	429a      	cmp	r2, r3
 8002316:	d1eb      	bne.n	80022f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002318:	4b25      	ldr	r3, [pc, #148]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d20c      	bcs.n	8002340 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b22      	ldr	r3, [pc, #136]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b20      	ldr	r3, [pc, #128]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e032      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800234c:	4b19      	ldr	r3, [pc, #100]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4916      	ldr	r1, [pc, #88]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d009      	beq.n	800237e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800236a:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	490e      	ldr	r1, [pc, #56]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	4313      	orrs	r3, r2
 800237c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800237e:	f000 f821 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8002382:	4602      	mov	r2, r0
 8002384:	4b0b      	ldr	r3, [pc, #44]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	490a      	ldr	r1, [pc, #40]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	5ccb      	ldrb	r3, [r1, r3]
 8002392:	fa22 f303 	lsr.w	r3, r2, r3
 8002396:	4a09      	ldr	r2, [pc, #36]	@ (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800239a:	4b09      	ldr	r3, [pc, #36]	@ (80023c0 <HAL_RCC_ClockConfig+0x1c8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fdb2 	bl	8000f08 <HAL_InitTick>

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40023c00 	.word	0x40023c00
 80023b4:	40023800 	.word	0x40023800
 80023b8:	0800412c 	.word	0x0800412c
 80023bc:	20000004 	.word	0x20000004
 80023c0:	20000008 	.word	0x20000008

080023c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023c8:	b090      	sub	sp, #64	@ 0x40
 80023ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023dc:	4b59      	ldr	r3, [pc, #356]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x180>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d00d      	beq.n	8002404 <HAL_RCC_GetSysClockFreq+0x40>
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	f200 80a1 	bhi.w	8002530 <HAL_RCC_GetSysClockFreq+0x16c>
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x34>
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d003      	beq.n	80023fe <HAL_RCC_GetSysClockFreq+0x3a>
 80023f6:	e09b      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023f8:	4b53      	ldr	r3, [pc, #332]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x184>)
 80023fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023fc:	e09b      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023fe:	4b53      	ldr	r3, [pc, #332]	@ (800254c <HAL_RCC_GetSysClockFreq+0x188>)
 8002400:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002402:	e098      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002404:	4b4f      	ldr	r3, [pc, #316]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x180>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800240c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800240e:	4b4d      	ldr	r3, [pc, #308]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x180>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d028      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800241a:	4b4a      	ldr	r3, [pc, #296]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x180>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	099b      	lsrs	r3, r3, #6
 8002420:	2200      	movs	r2, #0
 8002422:	623b      	str	r3, [r7, #32]
 8002424:	627a      	str	r2, [r7, #36]	@ 0x24
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800242c:	2100      	movs	r1, #0
 800242e:	4b47      	ldr	r3, [pc, #284]	@ (800254c <HAL_RCC_GetSysClockFreq+0x188>)
 8002430:	fb03 f201 	mul.w	r2, r3, r1
 8002434:	2300      	movs	r3, #0
 8002436:	fb00 f303 	mul.w	r3, r0, r3
 800243a:	4413      	add	r3, r2
 800243c:	4a43      	ldr	r2, [pc, #268]	@ (800254c <HAL_RCC_GetSysClockFreq+0x188>)
 800243e:	fba0 1202 	umull	r1, r2, r0, r2
 8002442:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002444:	460a      	mov	r2, r1
 8002446:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002448:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800244a:	4413      	add	r3, r2
 800244c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800244e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002450:	2200      	movs	r2, #0
 8002452:	61bb      	str	r3, [r7, #24]
 8002454:	61fa      	str	r2, [r7, #28]
 8002456:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800245a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800245e:	f7fd ff0f 	bl	8000280 <__aeabi_uldivmod>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4613      	mov	r3, r2
 8002468:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800246a:	e053      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800246c:	4b35      	ldr	r3, [pc, #212]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x180>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	099b      	lsrs	r3, r3, #6
 8002472:	2200      	movs	r2, #0
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	617a      	str	r2, [r7, #20]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800247e:	f04f 0b00 	mov.w	fp, #0
 8002482:	4652      	mov	r2, sl
 8002484:	465b      	mov	r3, fp
 8002486:	f04f 0000 	mov.w	r0, #0
 800248a:	f04f 0100 	mov.w	r1, #0
 800248e:	0159      	lsls	r1, r3, #5
 8002490:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002494:	0150      	lsls	r0, r2, #5
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	ebb2 080a 	subs.w	r8, r2, sl
 800249e:	eb63 090b 	sbc.w	r9, r3, fp
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024b6:	ebb2 0408 	subs.w	r4, r2, r8
 80024ba:	eb63 0509 	sbc.w	r5, r3, r9
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	00eb      	lsls	r3, r5, #3
 80024c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024cc:	00e2      	lsls	r2, r4, #3
 80024ce:	4614      	mov	r4, r2
 80024d0:	461d      	mov	r5, r3
 80024d2:	eb14 030a 	adds.w	r3, r4, sl
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	eb45 030b 	adc.w	r3, r5, fp
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024ea:	4629      	mov	r1, r5
 80024ec:	028b      	lsls	r3, r1, #10
 80024ee:	4621      	mov	r1, r4
 80024f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024f4:	4621      	mov	r1, r4
 80024f6:	028a      	lsls	r2, r1, #10
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024fe:	2200      	movs	r2, #0
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	60fa      	str	r2, [r7, #12]
 8002504:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002508:	f7fd feba 	bl	8000280 <__aeabi_uldivmod>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4613      	mov	r3, r2
 8002512:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002514:	4b0b      	ldr	r3, [pc, #44]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x180>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	0c1b      	lsrs	r3, r3, #16
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	3301      	adds	r3, #1
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002524:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002528:	fbb2 f3f3 	udiv	r3, r2, r3
 800252c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800252e:	e002      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002530:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x184>)
 8002532:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002538:	4618      	mov	r0, r3
 800253a:	3740      	adds	r7, #64	@ 0x40
 800253c:	46bd      	mov	sp, r7
 800253e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002542:	bf00      	nop
 8002544:	40023800 	.word	0x40023800
 8002548:	00f42400 	.word	0x00f42400
 800254c:	017d7840 	.word	0x017d7840

08002550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002554:	4b03      	ldr	r3, [pc, #12]	@ (8002564 <HAL_RCC_GetHCLKFreq+0x14>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20000004 	.word	0x20000004

08002568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800256c:	f7ff fff0 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 8002570:	4602      	mov	r2, r0
 8002572:	4b05      	ldr	r3, [pc, #20]	@ (8002588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	0a9b      	lsrs	r3, r3, #10
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	4903      	ldr	r1, [pc, #12]	@ (800258c <HAL_RCC_GetPCLK1Freq+0x24>)
 800257e:	5ccb      	ldrb	r3, [r1, r3]
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40023800 	.word	0x40023800
 800258c:	0800413c 	.word	0x0800413c

08002590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002594:	f7ff ffdc 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b05      	ldr	r3, [pc, #20]	@ (80025b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	0b5b      	lsrs	r3, r3, #13
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	4903      	ldr	r1, [pc, #12]	@ (80025b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a6:	5ccb      	ldrb	r3, [r1, r3]
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40023800 	.word	0x40023800
 80025b4:	0800413c 	.word	0x0800413c

080025b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e042      	b.n	8002650 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7fe fb38 	bl	8000c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2224      	movs	r2, #36	@ 0x24
 80025e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 fdcb 	bl	8003198 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002610:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695a      	ldr	r2, [r3, #20]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002620:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002630:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08c      	sub	sp, #48	@ 0x30
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	4613      	mov	r3, r2
 8002664:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b20      	cmp	r3, #32
 8002670:	d156      	bne.n	8002720 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <HAL_UART_Transmit_DMA+0x26>
 8002678:	88fb      	ldrh	r3, [r7, #6]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e04f      	b.n	8002722 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	88fa      	ldrh	r2, [r7, #6]
 800268c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	88fa      	ldrh	r2, [r7, #6]
 8002692:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2221      	movs	r2, #33	@ 0x21
 800269e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a6:	4a21      	ldr	r2, [pc, #132]	@ (800272c <HAL_UART_Transmit_DMA+0xd4>)
 80026a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ae:	4a20      	ldr	r2, [pc, #128]	@ (8002730 <HAL_UART_Transmit_DMA+0xd8>)
 80026b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002734 <HAL_UART_Transmit_DMA+0xdc>)
 80026b8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026be:	2200      	movs	r2, #0
 80026c0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80026c2:	f107 0308 	add.w	r3, r7, #8
 80026c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80026cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ce:	6819      	ldr	r1, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	3304      	adds	r3, #4
 80026d6:	461a      	mov	r2, r3
 80026d8:	88fb      	ldrh	r3, [r7, #6]
 80026da:	f7fe fe25 	bl	8001328 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026e6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3314      	adds	r3, #20
 80026ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	e853 3f00 	ldrex	r3, [r3]
 80026f6:	617b      	str	r3, [r7, #20]
   return(result);
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	3314      	adds	r3, #20
 8002706:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002708:	627a      	str	r2, [r7, #36]	@ 0x24
 800270a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800270c:	6a39      	ldr	r1, [r7, #32]
 800270e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002710:	e841 2300 	strex	r3, r2, [r1]
 8002714:	61fb      	str	r3, [r7, #28]
   return(result);
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1e5      	bne.n	80026e8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	e000      	b.n	8002722 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002720:	2302      	movs	r3, #2
  }
}
 8002722:	4618      	mov	r0, r3
 8002724:	3730      	adds	r7, #48	@ 0x30
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	08002cc5 	.word	0x08002cc5
 8002730:	08002d5f 	.word	0x08002d5f
 8002734:	08002d7b 	.word	0x08002d7b

08002738 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b0ba      	sub	sp, #232	@ 0xe8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800275e:	2300      	movs	r3, #0
 8002760:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800276a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10f      	bne.n	800279e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800277e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b00      	cmp	r3, #0
 8002788:	d009      	beq.n	800279e <HAL_UART_IRQHandler+0x66>
 800278a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800278e:	f003 0320 	and.w	r3, r3, #32
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fc40 	bl	800301c <UART_Receive_IT>
      return;
 800279c:	e25b      	b.n	8002c56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800279e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 80de 	beq.w	8002964 <HAL_UART_IRQHandler+0x22c>
 80027a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d106      	bne.n	80027c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80d1 	beq.w	8002964 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00b      	beq.n	80027e6 <HAL_UART_IRQHandler+0xae>
 80027ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	f043 0201 	orr.w	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00b      	beq.n	800280a <HAL_UART_IRQHandler+0xd2>
 80027f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002802:	f043 0202 	orr.w	r2, r3, #2
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800280a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00b      	beq.n	800282e <HAL_UART_IRQHandler+0xf6>
 8002816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002826:	f043 0204 	orr.w	r2, r3, #4
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800282e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d011      	beq.n	800285e <HAL_UART_IRQHandler+0x126>
 800283a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800283e:	f003 0320 	and.w	r3, r3, #32
 8002842:	2b00      	cmp	r3, #0
 8002844:	d105      	bne.n	8002852 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d005      	beq.n	800285e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002856:	f043 0208 	orr.w	r2, r3, #8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 81f2 	beq.w	8002c4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800286c:	f003 0320 	and.w	r3, r3, #32
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_UART_IRQHandler+0x14e>
 8002874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002878:	f003 0320 	and.w	r3, r3, #32
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 fbcb 	bl	800301c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002890:	2b40      	cmp	r3, #64	@ 0x40
 8002892:	bf0c      	ite	eq
 8002894:	2301      	moveq	r3, #1
 8002896:	2300      	movne	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d103      	bne.n	80028b2 <HAL_UART_IRQHandler+0x17a>
 80028aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d04f      	beq.n	8002952 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fad3 	bl	8002e5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028c2:	2b40      	cmp	r3, #64	@ 0x40
 80028c4:	d141      	bne.n	800294a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	3314      	adds	r3, #20
 80028cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028d4:	e853 3f00 	ldrex	r3, [r3]
 80028d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80028dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	3314      	adds	r3, #20
 80028ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80028f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80028f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80028fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002902:	e841 2300 	strex	r3, r2, [r1]
 8002906:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800290a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1d9      	bne.n	80028c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d013      	beq.n	8002942 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800291e:	4a7e      	ldr	r2, [pc, #504]	@ (8002b18 <HAL_UART_IRQHandler+0x3e0>)
 8002920:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fdc6 	bl	80014b8 <HAL_DMA_Abort_IT>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d016      	beq.n	8002960 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800293c:	4610      	mov	r0, r2
 800293e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002940:	e00e      	b.n	8002960 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f9a8 	bl	8002c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002948:	e00a      	b.n	8002960 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f9a4 	bl	8002c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002950:	e006      	b.n	8002960 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f9a0 	bl	8002c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800295e:	e175      	b.n	8002c4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002960:	bf00      	nop
    return;
 8002962:	e173      	b.n	8002c4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002968:	2b01      	cmp	r3, #1
 800296a:	f040 814f 	bne.w	8002c0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800296e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8148 	beq.w	8002c0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800297c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002980:	f003 0310 	and.w	r3, r3, #16
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 8141 	beq.w	8002c0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029aa:	2b40      	cmp	r3, #64	@ 0x40
 80029ac:	f040 80b6 	bne.w	8002b1c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 8145 	beq.w	8002c50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80029ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80029ce:	429a      	cmp	r2, r3
 80029d0:	f080 813e 	bcs.w	8002c50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80029da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029e6:	f000 8088 	beq.w	8002afa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	330c      	adds	r3, #12
 80029f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029f8:	e853 3f00 	ldrex	r3, [r3]
 80029fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002a00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	330c      	adds	r3, #12
 8002a12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002a16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002a22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002a26:	e841 2300 	strex	r3, r2, [r1]
 8002a2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1d9      	bne.n	80029ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3314      	adds	r3, #20
 8002a3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a40:	e853 3f00 	ldrex	r3, [r3]
 8002a44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002a46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3314      	adds	r3, #20
 8002a56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002a5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002a62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002a66:	e841 2300 	strex	r3, r2, [r1]
 8002a6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002a6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1e1      	bne.n	8002a36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3314      	adds	r3, #20
 8002a78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a7c:	e853 3f00 	ldrex	r3, [r3]
 8002a80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002a82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3314      	adds	r3, #20
 8002a92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002a96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002a9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a9e:	e841 2300 	strex	r3, r2, [r1]
 8002aa2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002aa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1e3      	bne.n	8002a72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	330c      	adds	r3, #12
 8002abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ac2:	e853 3f00 	ldrex	r3, [r3]
 8002ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002ac8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aca:	f023 0310 	bic.w	r3, r3, #16
 8002ace:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	330c      	adds	r3, #12
 8002ad8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002adc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002ade:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ae2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ae4:	e841 2300 	strex	r3, r2, [r1]
 8002ae8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002aea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1e3      	bne.n	8002ab8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fe fc6f 	bl	80013d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2202      	movs	r2, #2
 8002afe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	4619      	mov	r1, r3
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f8cb 	bl	8002cac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b16:	e09b      	b.n	8002c50 <HAL_UART_IRQHandler+0x518>
 8002b18:	08002f25 	.word	0x08002f25
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 808e 	beq.w	8002c54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002b38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 8089 	beq.w	8002c54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	330c      	adds	r3, #12
 8002b48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b4c:	e853 3f00 	ldrex	r3, [r3]
 8002b50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	330c      	adds	r3, #12
 8002b62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002b66:	647a      	str	r2, [r7, #68]	@ 0x44
 8002b68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b6e:	e841 2300 	strex	r3, r2, [r1]
 8002b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002b74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1e3      	bne.n	8002b42 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3314      	adds	r3, #20
 8002b80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b84:	e853 3f00 	ldrex	r3, [r3]
 8002b88:	623b      	str	r3, [r7, #32]
   return(result);
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3314      	adds	r3, #20
 8002b9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002b9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ba4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ba6:	e841 2300 	strex	r3, r2, [r1]
 8002baa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1e3      	bne.n	8002b7a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	330c      	adds	r3, #12
 8002bc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	e853 3f00 	ldrex	r3, [r3]
 8002bce:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0310 	bic.w	r3, r3, #16
 8002bd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	330c      	adds	r3, #12
 8002be0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002be4:	61fa      	str	r2, [r7, #28]
 8002be6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be8:	69b9      	ldr	r1, [r7, #24]
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	e841 2300 	strex	r3, r2, [r1]
 8002bf0:	617b      	str	r3, [r7, #20]
   return(result);
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1e3      	bne.n	8002bc0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c02:	4619      	mov	r1, r3
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f851 	bl	8002cac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c0a:	e023      	b.n	8002c54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d009      	beq.n	8002c2c <HAL_UART_IRQHandler+0x4f4>
 8002c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f991 	bl	8002f4c <UART_Transmit_IT>
    return;
 8002c2a:	e014      	b.n	8002c56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00e      	beq.n	8002c56 <HAL_UART_IRQHandler+0x51e>
 8002c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d008      	beq.n	8002c56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f9d1 	bl	8002fec <UART_EndTransmit_IT>
    return;
 8002c4a:	e004      	b.n	8002c56 <HAL_UART_IRQHandler+0x51e>
    return;
 8002c4c:	bf00      	nop
 8002c4e:	e002      	b.n	8002c56 <HAL_UART_IRQHandler+0x51e>
      return;
 8002c50:	bf00      	nop
 8002c52:	e000      	b.n	8002c56 <HAL_UART_IRQHandler+0x51e>
      return;
 8002c54:	bf00      	nop
  }
}
 8002c56:	37e8      	adds	r7, #232	@ 0xe8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b090      	sub	sp, #64	@ 0x40
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d137      	bne.n	8002d50 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3314      	adds	r3, #20
 8002cec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf0:	e853 3f00 	ldrex	r3, [r3]
 8002cf4:	623b      	str	r3, [r7, #32]
   return(result);
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3314      	adds	r3, #20
 8002d04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d06:	633a      	str	r2, [r7, #48]	@ 0x30
 8002d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d0e:	e841 2300 	strex	r3, r2, [r1]
 8002d12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1e5      	bne.n	8002ce6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	330c      	adds	r3, #12
 8002d20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	e853 3f00 	ldrex	r3, [r3]
 8002d28:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d30:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	330c      	adds	r3, #12
 8002d38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d3a:	61fa      	str	r2, [r7, #28]
 8002d3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3e:	69b9      	ldr	r1, [r7, #24]
 8002d40:	69fa      	ldr	r2, [r7, #28]
 8002d42:	e841 2300 	strex	r3, r2, [r1]
 8002d46:	617b      	str	r3, [r7, #20]
   return(result);
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1e5      	bne.n	8002d1a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d4e:	e002      	b.n	8002d56 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002d50:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002d52:	f7ff ff83 	bl	8002c5c <HAL_UART_TxCpltCallback>
}
 8002d56:	bf00      	nop
 8002d58:	3740      	adds	r7, #64	@ 0x40
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b084      	sub	sp, #16
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f7ff ff7f 	bl	8002c70 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d72:	bf00      	nop
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d8a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d96:	2b80      	cmp	r3, #128	@ 0x80
 8002d98:	bf0c      	ite	eq
 8002d9a:	2301      	moveq	r3, #1
 8002d9c:	2300      	movne	r3, #0
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b21      	cmp	r3, #33	@ 0x21
 8002dac:	d108      	bne.n	8002dc0 <UART_DMAError+0x46>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2200      	movs	r2, #0
 8002db8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002dba:	68b8      	ldr	r0, [r7, #8]
 8002dbc:	f000 f827 	bl	8002e0e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dca:	2b40      	cmp	r3, #64	@ 0x40
 8002dcc:	bf0c      	ite	eq
 8002dce:	2301      	moveq	r3, #1
 8002dd0:	2300      	movne	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b22      	cmp	r3, #34	@ 0x22
 8002de0:	d108      	bne.n	8002df4 <UART_DMAError+0x7a>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2200      	movs	r2, #0
 8002dec:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002dee:	68b8      	ldr	r0, [r7, #8]
 8002df0:	f000 f835 	bl	8002e5e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df8:	f043 0210 	orr.w	r2, r3, #16
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e00:	68b8      	ldr	r0, [r7, #8]
 8002e02:	f7ff ff49 	bl	8002c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b089      	sub	sp, #36	@ 0x24
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	330c      	adds	r3, #12
 8002e1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	e853 3f00 	ldrex	r3, [r3]
 8002e24:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002e2c:	61fb      	str	r3, [r7, #28]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	330c      	adds	r3, #12
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	61ba      	str	r2, [r7, #24]
 8002e38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3a:	6979      	ldr	r1, [r7, #20]
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	e841 2300 	strex	r3, r2, [r1]
 8002e42:	613b      	str	r3, [r7, #16]
   return(result);
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1e5      	bne.n	8002e16 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8002e52:	bf00      	nop
 8002e54:	3724      	adds	r7, #36	@ 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b095      	sub	sp, #84	@ 0x54
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	330c      	adds	r3, #12
 8002e6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e70:	e853 3f00 	ldrex	r3, [r3]
 8002e74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	330c      	adds	r3, #12
 8002e84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e86:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e8e:	e841 2300 	strex	r3, r2, [r1]
 8002e92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1e5      	bne.n	8002e66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	3314      	adds	r3, #20
 8002ea0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	e853 3f00 	ldrex	r3, [r3]
 8002ea8:	61fb      	str	r3, [r7, #28]
   return(result);
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f023 0301 	bic.w	r3, r3, #1
 8002eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	3314      	adds	r3, #20
 8002eb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002eba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ebe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ec0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ec2:	e841 2300 	strex	r3, r2, [r1]
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1e5      	bne.n	8002e9a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d119      	bne.n	8002f0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	330c      	adds	r3, #12
 8002edc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	e853 3f00 	ldrex	r3, [r3]
 8002ee4:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f023 0310 	bic.w	r3, r3, #16
 8002eec:	647b      	str	r3, [r7, #68]	@ 0x44
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	330c      	adds	r3, #12
 8002ef4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ef6:	61ba      	str	r2, [r7, #24]
 8002ef8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efa:	6979      	ldr	r1, [r7, #20]
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	e841 2300 	strex	r3, r2, [r1]
 8002f02:	613b      	str	r3, [r7, #16]
   return(result);
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1e5      	bne.n	8002ed6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f18:	bf00      	nop
 8002f1a:	3754      	adds	r7, #84	@ 0x54
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f7ff feaa 	bl	8002c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b21      	cmp	r3, #33	@ 0x21
 8002f5e:	d13e      	bne.n	8002fde <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f68:	d114      	bne.n	8002f94 <UART_Transmit_IT+0x48>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d110      	bne.n	8002f94 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f86:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	1c9a      	adds	r2, r3, #2
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	621a      	str	r2, [r3, #32]
 8002f92:	e008      	b.n	8002fa6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	1c59      	adds	r1, r3, #1
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6211      	str	r1, [r2, #32]
 8002f9e:	781a      	ldrb	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10f      	bne.n	8002fda <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fc8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fd8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	e000      	b.n	8002fe0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fde:	2302      	movs	r3, #2
  }
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003002:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff fe25 	bl	8002c5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08c      	sub	sp, #48	@ 0x30
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b22      	cmp	r3, #34	@ 0x22
 800302e:	f040 80ae 	bne.w	800318e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800303a:	d117      	bne.n	800306c <UART_Receive_IT+0x50>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d113      	bne.n	800306c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003044:	2300      	movs	r3, #0
 8003046:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	b29b      	uxth	r3, r3
 8003056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800305a:	b29a      	uxth	r2, r3
 800305c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003064:	1c9a      	adds	r2, r3, #2
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	629a      	str	r2, [r3, #40]	@ 0x28
 800306a:	e026      	b.n	80030ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003070:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003072:	2300      	movs	r3, #0
 8003074:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800307e:	d007      	beq.n	8003090 <UART_Receive_IT+0x74>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10a      	bne.n	800309e <UART_Receive_IT+0x82>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d106      	bne.n	800309e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	b2da      	uxtb	r2, r3
 8003098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800309a:	701a      	strb	r2, [r3, #0]
 800309c:	e008      	b.n	80030b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030be:	b29b      	uxth	r3, r3
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	4619      	mov	r1, r3
 80030c8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d15d      	bne.n	800318a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0220 	bic.w	r2, r2, #32
 80030dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0201 	bic.w	r2, r2, #1
 80030fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003110:	2b01      	cmp	r3, #1
 8003112:	d135      	bne.n	8003180 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	330c      	adds	r3, #12
 8003120:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	e853 3f00 	ldrex	r3, [r3]
 8003128:	613b      	str	r3, [r7, #16]
   return(result);
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f023 0310 	bic.w	r3, r3, #16
 8003130:	627b      	str	r3, [r7, #36]	@ 0x24
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	330c      	adds	r3, #12
 8003138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800313a:	623a      	str	r2, [r7, #32]
 800313c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313e:	69f9      	ldr	r1, [r7, #28]
 8003140:	6a3a      	ldr	r2, [r7, #32]
 8003142:	e841 2300 	strex	r3, r2, [r1]
 8003146:	61bb      	str	r3, [r7, #24]
   return(result);
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1e5      	bne.n	800311a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	2b10      	cmp	r3, #16
 800315a:	d10a      	bne.n	8003172 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003176:	4619      	mov	r1, r3
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff fd97 	bl	8002cac <HAL_UARTEx_RxEventCallback>
 800317e:	e002      	b.n	8003186 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff fd7f 	bl	8002c84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	e002      	b.n	8003190 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800318a:	2300      	movs	r3, #0
 800318c:	e000      	b.n	8003190 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800318e:	2302      	movs	r3, #2
  }
}
 8003190:	4618      	mov	r0, r3
 8003192:	3730      	adds	r7, #48	@ 0x30
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800319c:	b0c0      	sub	sp, #256	@ 0x100
 800319e:	af00      	add	r7, sp, #0
 80031a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b4:	68d9      	ldr	r1, [r3, #12]
 80031b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	ea40 0301 	orr.w	r3, r0, r1
 80031c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80031f0:	f021 010c 	bic.w	r1, r1, #12
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031fe:	430b      	orrs	r3, r1
 8003200:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800320e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003212:	6999      	ldr	r1, [r3, #24]
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	ea40 0301 	orr.w	r3, r0, r1
 800321e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	4b8f      	ldr	r3, [pc, #572]	@ (8003464 <UART_SetConfig+0x2cc>)
 8003228:	429a      	cmp	r2, r3
 800322a:	d005      	beq.n	8003238 <UART_SetConfig+0xa0>
 800322c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4b8d      	ldr	r3, [pc, #564]	@ (8003468 <UART_SetConfig+0x2d0>)
 8003234:	429a      	cmp	r2, r3
 8003236:	d104      	bne.n	8003242 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003238:	f7ff f9aa 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 800323c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003240:	e003      	b.n	800324a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003242:	f7ff f991 	bl	8002568 <HAL_RCC_GetPCLK1Freq>
 8003246:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800324a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003254:	f040 810c 	bne.w	8003470 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800325c:	2200      	movs	r2, #0
 800325e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003262:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003266:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800326a:	4622      	mov	r2, r4
 800326c:	462b      	mov	r3, r5
 800326e:	1891      	adds	r1, r2, r2
 8003270:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003272:	415b      	adcs	r3, r3
 8003274:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003276:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800327a:	4621      	mov	r1, r4
 800327c:	eb12 0801 	adds.w	r8, r2, r1
 8003280:	4629      	mov	r1, r5
 8003282:	eb43 0901 	adc.w	r9, r3, r1
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003292:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003296:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800329a:	4690      	mov	r8, r2
 800329c:	4699      	mov	r9, r3
 800329e:	4623      	mov	r3, r4
 80032a0:	eb18 0303 	adds.w	r3, r8, r3
 80032a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80032a8:	462b      	mov	r3, r5
 80032aa:	eb49 0303 	adc.w	r3, r9, r3
 80032ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80032b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80032be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80032c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80032c6:	460b      	mov	r3, r1
 80032c8:	18db      	adds	r3, r3, r3
 80032ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80032cc:	4613      	mov	r3, r2
 80032ce:	eb42 0303 	adc.w	r3, r2, r3
 80032d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80032d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032dc:	f7fc ffd0 	bl	8000280 <__aeabi_uldivmod>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4b61      	ldr	r3, [pc, #388]	@ (800346c <UART_SetConfig+0x2d4>)
 80032e6:	fba3 2302 	umull	r2, r3, r3, r2
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	011c      	lsls	r4, r3, #4
 80032ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032f2:	2200      	movs	r2, #0
 80032f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80032fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003300:	4642      	mov	r2, r8
 8003302:	464b      	mov	r3, r9
 8003304:	1891      	adds	r1, r2, r2
 8003306:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003308:	415b      	adcs	r3, r3
 800330a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800330c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003310:	4641      	mov	r1, r8
 8003312:	eb12 0a01 	adds.w	sl, r2, r1
 8003316:	4649      	mov	r1, r9
 8003318:	eb43 0b01 	adc.w	fp, r3, r1
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003328:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800332c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003330:	4692      	mov	sl, r2
 8003332:	469b      	mov	fp, r3
 8003334:	4643      	mov	r3, r8
 8003336:	eb1a 0303 	adds.w	r3, sl, r3
 800333a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800333e:	464b      	mov	r3, r9
 8003340:	eb4b 0303 	adc.w	r3, fp, r3
 8003344:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003354:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003358:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800335c:	460b      	mov	r3, r1
 800335e:	18db      	adds	r3, r3, r3
 8003360:	643b      	str	r3, [r7, #64]	@ 0x40
 8003362:	4613      	mov	r3, r2
 8003364:	eb42 0303 	adc.w	r3, r2, r3
 8003368:	647b      	str	r3, [r7, #68]	@ 0x44
 800336a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800336e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003372:	f7fc ff85 	bl	8000280 <__aeabi_uldivmod>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4611      	mov	r1, r2
 800337c:	4b3b      	ldr	r3, [pc, #236]	@ (800346c <UART_SetConfig+0x2d4>)
 800337e:	fba3 2301 	umull	r2, r3, r3, r1
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	2264      	movs	r2, #100	@ 0x64
 8003386:	fb02 f303 	mul.w	r3, r2, r3
 800338a:	1acb      	subs	r3, r1, r3
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003392:	4b36      	ldr	r3, [pc, #216]	@ (800346c <UART_SetConfig+0x2d4>)
 8003394:	fba3 2302 	umull	r2, r3, r3, r2
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80033a0:	441c      	add	r4, r3
 80033a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80033b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80033b4:	4642      	mov	r2, r8
 80033b6:	464b      	mov	r3, r9
 80033b8:	1891      	adds	r1, r2, r2
 80033ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80033bc:	415b      	adcs	r3, r3
 80033be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80033c4:	4641      	mov	r1, r8
 80033c6:	1851      	adds	r1, r2, r1
 80033c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80033ca:	4649      	mov	r1, r9
 80033cc:	414b      	adcs	r3, r1
 80033ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033dc:	4659      	mov	r1, fp
 80033de:	00cb      	lsls	r3, r1, #3
 80033e0:	4651      	mov	r1, sl
 80033e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033e6:	4651      	mov	r1, sl
 80033e8:	00ca      	lsls	r2, r1, #3
 80033ea:	4610      	mov	r0, r2
 80033ec:	4619      	mov	r1, r3
 80033ee:	4603      	mov	r3, r0
 80033f0:	4642      	mov	r2, r8
 80033f2:	189b      	adds	r3, r3, r2
 80033f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033f8:	464b      	mov	r3, r9
 80033fa:	460a      	mov	r2, r1
 80033fc:	eb42 0303 	adc.w	r3, r2, r3
 8003400:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003410:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003414:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003418:	460b      	mov	r3, r1
 800341a:	18db      	adds	r3, r3, r3
 800341c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800341e:	4613      	mov	r3, r2
 8003420:	eb42 0303 	adc.w	r3, r2, r3
 8003424:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003426:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800342a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800342e:	f7fc ff27 	bl	8000280 <__aeabi_uldivmod>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4b0d      	ldr	r3, [pc, #52]	@ (800346c <UART_SetConfig+0x2d4>)
 8003438:	fba3 1302 	umull	r1, r3, r3, r2
 800343c:	095b      	lsrs	r3, r3, #5
 800343e:	2164      	movs	r1, #100	@ 0x64
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	3332      	adds	r3, #50	@ 0x32
 800344a:	4a08      	ldr	r2, [pc, #32]	@ (800346c <UART_SetConfig+0x2d4>)
 800344c:	fba2 2303 	umull	r2, r3, r2, r3
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	f003 0207 	and.w	r2, r3, #7
 8003456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4422      	add	r2, r4
 800345e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003460:	e106      	b.n	8003670 <UART_SetConfig+0x4d8>
 8003462:	bf00      	nop
 8003464:	40011000 	.word	0x40011000
 8003468:	40011400 	.word	0x40011400
 800346c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003474:	2200      	movs	r2, #0
 8003476:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800347a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800347e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003482:	4642      	mov	r2, r8
 8003484:	464b      	mov	r3, r9
 8003486:	1891      	adds	r1, r2, r2
 8003488:	6239      	str	r1, [r7, #32]
 800348a:	415b      	adcs	r3, r3
 800348c:	627b      	str	r3, [r7, #36]	@ 0x24
 800348e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003492:	4641      	mov	r1, r8
 8003494:	1854      	adds	r4, r2, r1
 8003496:	4649      	mov	r1, r9
 8003498:	eb43 0501 	adc.w	r5, r3, r1
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	00eb      	lsls	r3, r5, #3
 80034a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034aa:	00e2      	lsls	r2, r4, #3
 80034ac:	4614      	mov	r4, r2
 80034ae:	461d      	mov	r5, r3
 80034b0:	4643      	mov	r3, r8
 80034b2:	18e3      	adds	r3, r4, r3
 80034b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034b8:	464b      	mov	r3, r9
 80034ba:	eb45 0303 	adc.w	r3, r5, r3
 80034be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034de:	4629      	mov	r1, r5
 80034e0:	008b      	lsls	r3, r1, #2
 80034e2:	4621      	mov	r1, r4
 80034e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034e8:	4621      	mov	r1, r4
 80034ea:	008a      	lsls	r2, r1, #2
 80034ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80034f0:	f7fc fec6 	bl	8000280 <__aeabi_uldivmod>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4b60      	ldr	r3, [pc, #384]	@ (800367c <UART_SetConfig+0x4e4>)
 80034fa:	fba3 2302 	umull	r2, r3, r3, r2
 80034fe:	095b      	lsrs	r3, r3, #5
 8003500:	011c      	lsls	r4, r3, #4
 8003502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003506:	2200      	movs	r2, #0
 8003508:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800350c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003510:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003514:	4642      	mov	r2, r8
 8003516:	464b      	mov	r3, r9
 8003518:	1891      	adds	r1, r2, r2
 800351a:	61b9      	str	r1, [r7, #24]
 800351c:	415b      	adcs	r3, r3
 800351e:	61fb      	str	r3, [r7, #28]
 8003520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003524:	4641      	mov	r1, r8
 8003526:	1851      	adds	r1, r2, r1
 8003528:	6139      	str	r1, [r7, #16]
 800352a:	4649      	mov	r1, r9
 800352c:	414b      	adcs	r3, r1
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800353c:	4659      	mov	r1, fp
 800353e:	00cb      	lsls	r3, r1, #3
 8003540:	4651      	mov	r1, sl
 8003542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003546:	4651      	mov	r1, sl
 8003548:	00ca      	lsls	r2, r1, #3
 800354a:	4610      	mov	r0, r2
 800354c:	4619      	mov	r1, r3
 800354e:	4603      	mov	r3, r0
 8003550:	4642      	mov	r2, r8
 8003552:	189b      	adds	r3, r3, r2
 8003554:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003558:	464b      	mov	r3, r9
 800355a:	460a      	mov	r2, r1
 800355c:	eb42 0303 	adc.w	r3, r2, r3
 8003560:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800356e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800357c:	4649      	mov	r1, r9
 800357e:	008b      	lsls	r3, r1, #2
 8003580:	4641      	mov	r1, r8
 8003582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003586:	4641      	mov	r1, r8
 8003588:	008a      	lsls	r2, r1, #2
 800358a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800358e:	f7fc fe77 	bl	8000280 <__aeabi_uldivmod>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	4611      	mov	r1, r2
 8003598:	4b38      	ldr	r3, [pc, #224]	@ (800367c <UART_SetConfig+0x4e4>)
 800359a:	fba3 2301 	umull	r2, r3, r3, r1
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	2264      	movs	r2, #100	@ 0x64
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	1acb      	subs	r3, r1, r3
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	3332      	adds	r3, #50	@ 0x32
 80035ac:	4a33      	ldr	r2, [pc, #204]	@ (800367c <UART_SetConfig+0x4e4>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035b8:	441c      	add	r4, r3
 80035ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035be:	2200      	movs	r2, #0
 80035c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80035c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80035c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80035c8:	4642      	mov	r2, r8
 80035ca:	464b      	mov	r3, r9
 80035cc:	1891      	adds	r1, r2, r2
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	415b      	adcs	r3, r3
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035d8:	4641      	mov	r1, r8
 80035da:	1851      	adds	r1, r2, r1
 80035dc:	6039      	str	r1, [r7, #0]
 80035de:	4649      	mov	r1, r9
 80035e0:	414b      	adcs	r3, r1
 80035e2:	607b      	str	r3, [r7, #4]
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035f0:	4659      	mov	r1, fp
 80035f2:	00cb      	lsls	r3, r1, #3
 80035f4:	4651      	mov	r1, sl
 80035f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035fa:	4651      	mov	r1, sl
 80035fc:	00ca      	lsls	r2, r1, #3
 80035fe:	4610      	mov	r0, r2
 8003600:	4619      	mov	r1, r3
 8003602:	4603      	mov	r3, r0
 8003604:	4642      	mov	r2, r8
 8003606:	189b      	adds	r3, r3, r2
 8003608:	66bb      	str	r3, [r7, #104]	@ 0x68
 800360a:	464b      	mov	r3, r9
 800360c:	460a      	mov	r2, r1
 800360e:	eb42 0303 	adc.w	r3, r2, r3
 8003612:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	663b      	str	r3, [r7, #96]	@ 0x60
 800361e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800362c:	4649      	mov	r1, r9
 800362e:	008b      	lsls	r3, r1, #2
 8003630:	4641      	mov	r1, r8
 8003632:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003636:	4641      	mov	r1, r8
 8003638:	008a      	lsls	r2, r1, #2
 800363a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800363e:	f7fc fe1f 	bl	8000280 <__aeabi_uldivmod>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4b0d      	ldr	r3, [pc, #52]	@ (800367c <UART_SetConfig+0x4e4>)
 8003648:	fba3 1302 	umull	r1, r3, r3, r2
 800364c:	095b      	lsrs	r3, r3, #5
 800364e:	2164      	movs	r1, #100	@ 0x64
 8003650:	fb01 f303 	mul.w	r3, r1, r3
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	3332      	adds	r3, #50	@ 0x32
 800365a:	4a08      	ldr	r2, [pc, #32]	@ (800367c <UART_SetConfig+0x4e4>)
 800365c:	fba2 2303 	umull	r2, r3, r2, r3
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	f003 020f 	and.w	r2, r3, #15
 8003666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4422      	add	r2, r4
 800366e:	609a      	str	r2, [r3, #8]
}
 8003670:	bf00      	nop
 8003672:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003676:	46bd      	mov	sp, r7
 8003678:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800367c:	51eb851f 	.word	0x51eb851f

08003680 <siprintf>:
 8003680:	b40e      	push	{r1, r2, r3}
 8003682:	b500      	push	{lr}
 8003684:	b09c      	sub	sp, #112	@ 0x70
 8003686:	ab1d      	add	r3, sp, #116	@ 0x74
 8003688:	9002      	str	r0, [sp, #8]
 800368a:	9006      	str	r0, [sp, #24]
 800368c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003690:	4809      	ldr	r0, [pc, #36]	@ (80036b8 <siprintf+0x38>)
 8003692:	9107      	str	r1, [sp, #28]
 8003694:	9104      	str	r1, [sp, #16]
 8003696:	4909      	ldr	r1, [pc, #36]	@ (80036bc <siprintf+0x3c>)
 8003698:	f853 2b04 	ldr.w	r2, [r3], #4
 800369c:	9105      	str	r1, [sp, #20]
 800369e:	6800      	ldr	r0, [r0, #0]
 80036a0:	9301      	str	r3, [sp, #4]
 80036a2:	a902      	add	r1, sp, #8
 80036a4:	f000 f994 	bl	80039d0 <_svfiprintf_r>
 80036a8:	9b02      	ldr	r3, [sp, #8]
 80036aa:	2200      	movs	r2, #0
 80036ac:	701a      	strb	r2, [r3, #0]
 80036ae:	b01c      	add	sp, #112	@ 0x70
 80036b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80036b4:	b003      	add	sp, #12
 80036b6:	4770      	bx	lr
 80036b8:	20000010 	.word	0x20000010
 80036bc:	ffff0208 	.word	0xffff0208

080036c0 <memset>:
 80036c0:	4402      	add	r2, r0
 80036c2:	4603      	mov	r3, r0
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d100      	bne.n	80036ca <memset+0xa>
 80036c8:	4770      	bx	lr
 80036ca:	f803 1b01 	strb.w	r1, [r3], #1
 80036ce:	e7f9      	b.n	80036c4 <memset+0x4>

080036d0 <__errno>:
 80036d0:	4b01      	ldr	r3, [pc, #4]	@ (80036d8 <__errno+0x8>)
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	20000010 	.word	0x20000010

080036dc <__libc_init_array>:
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	4d0d      	ldr	r5, [pc, #52]	@ (8003714 <__libc_init_array+0x38>)
 80036e0:	4c0d      	ldr	r4, [pc, #52]	@ (8003718 <__libc_init_array+0x3c>)
 80036e2:	1b64      	subs	r4, r4, r5
 80036e4:	10a4      	asrs	r4, r4, #2
 80036e6:	2600      	movs	r6, #0
 80036e8:	42a6      	cmp	r6, r4
 80036ea:	d109      	bne.n	8003700 <__libc_init_array+0x24>
 80036ec:	4d0b      	ldr	r5, [pc, #44]	@ (800371c <__libc_init_array+0x40>)
 80036ee:	4c0c      	ldr	r4, [pc, #48]	@ (8003720 <__libc_init_array+0x44>)
 80036f0:	f000 fc66 	bl	8003fc0 <_init>
 80036f4:	1b64      	subs	r4, r4, r5
 80036f6:	10a4      	asrs	r4, r4, #2
 80036f8:	2600      	movs	r6, #0
 80036fa:	42a6      	cmp	r6, r4
 80036fc:	d105      	bne.n	800370a <__libc_init_array+0x2e>
 80036fe:	bd70      	pop	{r4, r5, r6, pc}
 8003700:	f855 3b04 	ldr.w	r3, [r5], #4
 8003704:	4798      	blx	r3
 8003706:	3601      	adds	r6, #1
 8003708:	e7ee      	b.n	80036e8 <__libc_init_array+0xc>
 800370a:	f855 3b04 	ldr.w	r3, [r5], #4
 800370e:	4798      	blx	r3
 8003710:	3601      	adds	r6, #1
 8003712:	e7f2      	b.n	80036fa <__libc_init_array+0x1e>
 8003714:	08004188 	.word	0x08004188
 8003718:	08004188 	.word	0x08004188
 800371c:	08004188 	.word	0x08004188
 8003720:	0800418c 	.word	0x0800418c

08003724 <__retarget_lock_acquire_recursive>:
 8003724:	4770      	bx	lr

08003726 <__retarget_lock_release_recursive>:
 8003726:	4770      	bx	lr

08003728 <_free_r>:
 8003728:	b538      	push	{r3, r4, r5, lr}
 800372a:	4605      	mov	r5, r0
 800372c:	2900      	cmp	r1, #0
 800372e:	d041      	beq.n	80037b4 <_free_r+0x8c>
 8003730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003734:	1f0c      	subs	r4, r1, #4
 8003736:	2b00      	cmp	r3, #0
 8003738:	bfb8      	it	lt
 800373a:	18e4      	addlt	r4, r4, r3
 800373c:	f000 f8e0 	bl	8003900 <__malloc_lock>
 8003740:	4a1d      	ldr	r2, [pc, #116]	@ (80037b8 <_free_r+0x90>)
 8003742:	6813      	ldr	r3, [r2, #0]
 8003744:	b933      	cbnz	r3, 8003754 <_free_r+0x2c>
 8003746:	6063      	str	r3, [r4, #4]
 8003748:	6014      	str	r4, [r2, #0]
 800374a:	4628      	mov	r0, r5
 800374c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003750:	f000 b8dc 	b.w	800390c <__malloc_unlock>
 8003754:	42a3      	cmp	r3, r4
 8003756:	d908      	bls.n	800376a <_free_r+0x42>
 8003758:	6820      	ldr	r0, [r4, #0]
 800375a:	1821      	adds	r1, r4, r0
 800375c:	428b      	cmp	r3, r1
 800375e:	bf01      	itttt	eq
 8003760:	6819      	ldreq	r1, [r3, #0]
 8003762:	685b      	ldreq	r3, [r3, #4]
 8003764:	1809      	addeq	r1, r1, r0
 8003766:	6021      	streq	r1, [r4, #0]
 8003768:	e7ed      	b.n	8003746 <_free_r+0x1e>
 800376a:	461a      	mov	r2, r3
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	b10b      	cbz	r3, 8003774 <_free_r+0x4c>
 8003770:	42a3      	cmp	r3, r4
 8003772:	d9fa      	bls.n	800376a <_free_r+0x42>
 8003774:	6811      	ldr	r1, [r2, #0]
 8003776:	1850      	adds	r0, r2, r1
 8003778:	42a0      	cmp	r0, r4
 800377a:	d10b      	bne.n	8003794 <_free_r+0x6c>
 800377c:	6820      	ldr	r0, [r4, #0]
 800377e:	4401      	add	r1, r0
 8003780:	1850      	adds	r0, r2, r1
 8003782:	4283      	cmp	r3, r0
 8003784:	6011      	str	r1, [r2, #0]
 8003786:	d1e0      	bne.n	800374a <_free_r+0x22>
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	6053      	str	r3, [r2, #4]
 800378e:	4408      	add	r0, r1
 8003790:	6010      	str	r0, [r2, #0]
 8003792:	e7da      	b.n	800374a <_free_r+0x22>
 8003794:	d902      	bls.n	800379c <_free_r+0x74>
 8003796:	230c      	movs	r3, #12
 8003798:	602b      	str	r3, [r5, #0]
 800379a:	e7d6      	b.n	800374a <_free_r+0x22>
 800379c:	6820      	ldr	r0, [r4, #0]
 800379e:	1821      	adds	r1, r4, r0
 80037a0:	428b      	cmp	r3, r1
 80037a2:	bf04      	itt	eq
 80037a4:	6819      	ldreq	r1, [r3, #0]
 80037a6:	685b      	ldreq	r3, [r3, #4]
 80037a8:	6063      	str	r3, [r4, #4]
 80037aa:	bf04      	itt	eq
 80037ac:	1809      	addeq	r1, r1, r0
 80037ae:	6021      	streq	r1, [r4, #0]
 80037b0:	6054      	str	r4, [r2, #4]
 80037b2:	e7ca      	b.n	800374a <_free_r+0x22>
 80037b4:	bd38      	pop	{r3, r4, r5, pc}
 80037b6:	bf00      	nop
 80037b8:	20000278 	.word	0x20000278

080037bc <sbrk_aligned>:
 80037bc:	b570      	push	{r4, r5, r6, lr}
 80037be:	4e0f      	ldr	r6, [pc, #60]	@ (80037fc <sbrk_aligned+0x40>)
 80037c0:	460c      	mov	r4, r1
 80037c2:	6831      	ldr	r1, [r6, #0]
 80037c4:	4605      	mov	r5, r0
 80037c6:	b911      	cbnz	r1, 80037ce <sbrk_aligned+0x12>
 80037c8:	f000 fba6 	bl	8003f18 <_sbrk_r>
 80037cc:	6030      	str	r0, [r6, #0]
 80037ce:	4621      	mov	r1, r4
 80037d0:	4628      	mov	r0, r5
 80037d2:	f000 fba1 	bl	8003f18 <_sbrk_r>
 80037d6:	1c43      	adds	r3, r0, #1
 80037d8:	d103      	bne.n	80037e2 <sbrk_aligned+0x26>
 80037da:	f04f 34ff 	mov.w	r4, #4294967295
 80037de:	4620      	mov	r0, r4
 80037e0:	bd70      	pop	{r4, r5, r6, pc}
 80037e2:	1cc4      	adds	r4, r0, #3
 80037e4:	f024 0403 	bic.w	r4, r4, #3
 80037e8:	42a0      	cmp	r0, r4
 80037ea:	d0f8      	beq.n	80037de <sbrk_aligned+0x22>
 80037ec:	1a21      	subs	r1, r4, r0
 80037ee:	4628      	mov	r0, r5
 80037f0:	f000 fb92 	bl	8003f18 <_sbrk_r>
 80037f4:	3001      	adds	r0, #1
 80037f6:	d1f2      	bne.n	80037de <sbrk_aligned+0x22>
 80037f8:	e7ef      	b.n	80037da <sbrk_aligned+0x1e>
 80037fa:	bf00      	nop
 80037fc:	20000274 	.word	0x20000274

08003800 <_malloc_r>:
 8003800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003804:	1ccd      	adds	r5, r1, #3
 8003806:	f025 0503 	bic.w	r5, r5, #3
 800380a:	3508      	adds	r5, #8
 800380c:	2d0c      	cmp	r5, #12
 800380e:	bf38      	it	cc
 8003810:	250c      	movcc	r5, #12
 8003812:	2d00      	cmp	r5, #0
 8003814:	4606      	mov	r6, r0
 8003816:	db01      	blt.n	800381c <_malloc_r+0x1c>
 8003818:	42a9      	cmp	r1, r5
 800381a:	d904      	bls.n	8003826 <_malloc_r+0x26>
 800381c:	230c      	movs	r3, #12
 800381e:	6033      	str	r3, [r6, #0]
 8003820:	2000      	movs	r0, #0
 8003822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003826:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80038fc <_malloc_r+0xfc>
 800382a:	f000 f869 	bl	8003900 <__malloc_lock>
 800382e:	f8d8 3000 	ldr.w	r3, [r8]
 8003832:	461c      	mov	r4, r3
 8003834:	bb44      	cbnz	r4, 8003888 <_malloc_r+0x88>
 8003836:	4629      	mov	r1, r5
 8003838:	4630      	mov	r0, r6
 800383a:	f7ff ffbf 	bl	80037bc <sbrk_aligned>
 800383e:	1c43      	adds	r3, r0, #1
 8003840:	4604      	mov	r4, r0
 8003842:	d158      	bne.n	80038f6 <_malloc_r+0xf6>
 8003844:	f8d8 4000 	ldr.w	r4, [r8]
 8003848:	4627      	mov	r7, r4
 800384a:	2f00      	cmp	r7, #0
 800384c:	d143      	bne.n	80038d6 <_malloc_r+0xd6>
 800384e:	2c00      	cmp	r4, #0
 8003850:	d04b      	beq.n	80038ea <_malloc_r+0xea>
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	4639      	mov	r1, r7
 8003856:	4630      	mov	r0, r6
 8003858:	eb04 0903 	add.w	r9, r4, r3
 800385c:	f000 fb5c 	bl	8003f18 <_sbrk_r>
 8003860:	4581      	cmp	r9, r0
 8003862:	d142      	bne.n	80038ea <_malloc_r+0xea>
 8003864:	6821      	ldr	r1, [r4, #0]
 8003866:	1a6d      	subs	r5, r5, r1
 8003868:	4629      	mov	r1, r5
 800386a:	4630      	mov	r0, r6
 800386c:	f7ff ffa6 	bl	80037bc <sbrk_aligned>
 8003870:	3001      	adds	r0, #1
 8003872:	d03a      	beq.n	80038ea <_malloc_r+0xea>
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	442b      	add	r3, r5
 8003878:	6023      	str	r3, [r4, #0]
 800387a:	f8d8 3000 	ldr.w	r3, [r8]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	bb62      	cbnz	r2, 80038dc <_malloc_r+0xdc>
 8003882:	f8c8 7000 	str.w	r7, [r8]
 8003886:	e00f      	b.n	80038a8 <_malloc_r+0xa8>
 8003888:	6822      	ldr	r2, [r4, #0]
 800388a:	1b52      	subs	r2, r2, r5
 800388c:	d420      	bmi.n	80038d0 <_malloc_r+0xd0>
 800388e:	2a0b      	cmp	r2, #11
 8003890:	d917      	bls.n	80038c2 <_malloc_r+0xc2>
 8003892:	1961      	adds	r1, r4, r5
 8003894:	42a3      	cmp	r3, r4
 8003896:	6025      	str	r5, [r4, #0]
 8003898:	bf18      	it	ne
 800389a:	6059      	strne	r1, [r3, #4]
 800389c:	6863      	ldr	r3, [r4, #4]
 800389e:	bf08      	it	eq
 80038a0:	f8c8 1000 	streq.w	r1, [r8]
 80038a4:	5162      	str	r2, [r4, r5]
 80038a6:	604b      	str	r3, [r1, #4]
 80038a8:	4630      	mov	r0, r6
 80038aa:	f000 f82f 	bl	800390c <__malloc_unlock>
 80038ae:	f104 000b 	add.w	r0, r4, #11
 80038b2:	1d23      	adds	r3, r4, #4
 80038b4:	f020 0007 	bic.w	r0, r0, #7
 80038b8:	1ac2      	subs	r2, r0, r3
 80038ba:	bf1c      	itt	ne
 80038bc:	1a1b      	subne	r3, r3, r0
 80038be:	50a3      	strne	r3, [r4, r2]
 80038c0:	e7af      	b.n	8003822 <_malloc_r+0x22>
 80038c2:	6862      	ldr	r2, [r4, #4]
 80038c4:	42a3      	cmp	r3, r4
 80038c6:	bf0c      	ite	eq
 80038c8:	f8c8 2000 	streq.w	r2, [r8]
 80038cc:	605a      	strne	r2, [r3, #4]
 80038ce:	e7eb      	b.n	80038a8 <_malloc_r+0xa8>
 80038d0:	4623      	mov	r3, r4
 80038d2:	6864      	ldr	r4, [r4, #4]
 80038d4:	e7ae      	b.n	8003834 <_malloc_r+0x34>
 80038d6:	463c      	mov	r4, r7
 80038d8:	687f      	ldr	r7, [r7, #4]
 80038da:	e7b6      	b.n	800384a <_malloc_r+0x4a>
 80038dc:	461a      	mov	r2, r3
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	42a3      	cmp	r3, r4
 80038e2:	d1fb      	bne.n	80038dc <_malloc_r+0xdc>
 80038e4:	2300      	movs	r3, #0
 80038e6:	6053      	str	r3, [r2, #4]
 80038e8:	e7de      	b.n	80038a8 <_malloc_r+0xa8>
 80038ea:	230c      	movs	r3, #12
 80038ec:	6033      	str	r3, [r6, #0]
 80038ee:	4630      	mov	r0, r6
 80038f0:	f000 f80c 	bl	800390c <__malloc_unlock>
 80038f4:	e794      	b.n	8003820 <_malloc_r+0x20>
 80038f6:	6005      	str	r5, [r0, #0]
 80038f8:	e7d6      	b.n	80038a8 <_malloc_r+0xa8>
 80038fa:	bf00      	nop
 80038fc:	20000278 	.word	0x20000278

08003900 <__malloc_lock>:
 8003900:	4801      	ldr	r0, [pc, #4]	@ (8003908 <__malloc_lock+0x8>)
 8003902:	f7ff bf0f 	b.w	8003724 <__retarget_lock_acquire_recursive>
 8003906:	bf00      	nop
 8003908:	20000270 	.word	0x20000270

0800390c <__malloc_unlock>:
 800390c:	4801      	ldr	r0, [pc, #4]	@ (8003914 <__malloc_unlock+0x8>)
 800390e:	f7ff bf0a 	b.w	8003726 <__retarget_lock_release_recursive>
 8003912:	bf00      	nop
 8003914:	20000270 	.word	0x20000270

08003918 <__ssputs_r>:
 8003918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800391c:	688e      	ldr	r6, [r1, #8]
 800391e:	461f      	mov	r7, r3
 8003920:	42be      	cmp	r6, r7
 8003922:	680b      	ldr	r3, [r1, #0]
 8003924:	4682      	mov	sl, r0
 8003926:	460c      	mov	r4, r1
 8003928:	4690      	mov	r8, r2
 800392a:	d82d      	bhi.n	8003988 <__ssputs_r+0x70>
 800392c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003930:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003934:	d026      	beq.n	8003984 <__ssputs_r+0x6c>
 8003936:	6965      	ldr	r5, [r4, #20]
 8003938:	6909      	ldr	r1, [r1, #16]
 800393a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800393e:	eba3 0901 	sub.w	r9, r3, r1
 8003942:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003946:	1c7b      	adds	r3, r7, #1
 8003948:	444b      	add	r3, r9
 800394a:	106d      	asrs	r5, r5, #1
 800394c:	429d      	cmp	r5, r3
 800394e:	bf38      	it	cc
 8003950:	461d      	movcc	r5, r3
 8003952:	0553      	lsls	r3, r2, #21
 8003954:	d527      	bpl.n	80039a6 <__ssputs_r+0x8e>
 8003956:	4629      	mov	r1, r5
 8003958:	f7ff ff52 	bl	8003800 <_malloc_r>
 800395c:	4606      	mov	r6, r0
 800395e:	b360      	cbz	r0, 80039ba <__ssputs_r+0xa2>
 8003960:	6921      	ldr	r1, [r4, #16]
 8003962:	464a      	mov	r2, r9
 8003964:	f000 fae8 	bl	8003f38 <memcpy>
 8003968:	89a3      	ldrh	r3, [r4, #12]
 800396a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800396e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003972:	81a3      	strh	r3, [r4, #12]
 8003974:	6126      	str	r6, [r4, #16]
 8003976:	6165      	str	r5, [r4, #20]
 8003978:	444e      	add	r6, r9
 800397a:	eba5 0509 	sub.w	r5, r5, r9
 800397e:	6026      	str	r6, [r4, #0]
 8003980:	60a5      	str	r5, [r4, #8]
 8003982:	463e      	mov	r6, r7
 8003984:	42be      	cmp	r6, r7
 8003986:	d900      	bls.n	800398a <__ssputs_r+0x72>
 8003988:	463e      	mov	r6, r7
 800398a:	6820      	ldr	r0, [r4, #0]
 800398c:	4632      	mov	r2, r6
 800398e:	4641      	mov	r1, r8
 8003990:	f000 faa8 	bl	8003ee4 <memmove>
 8003994:	68a3      	ldr	r3, [r4, #8]
 8003996:	1b9b      	subs	r3, r3, r6
 8003998:	60a3      	str	r3, [r4, #8]
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	4433      	add	r3, r6
 800399e:	6023      	str	r3, [r4, #0]
 80039a0:	2000      	movs	r0, #0
 80039a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a6:	462a      	mov	r2, r5
 80039a8:	f000 fad4 	bl	8003f54 <_realloc_r>
 80039ac:	4606      	mov	r6, r0
 80039ae:	2800      	cmp	r0, #0
 80039b0:	d1e0      	bne.n	8003974 <__ssputs_r+0x5c>
 80039b2:	6921      	ldr	r1, [r4, #16]
 80039b4:	4650      	mov	r0, sl
 80039b6:	f7ff feb7 	bl	8003728 <_free_r>
 80039ba:	230c      	movs	r3, #12
 80039bc:	f8ca 3000 	str.w	r3, [sl]
 80039c0:	89a3      	ldrh	r3, [r4, #12]
 80039c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039c6:	81a3      	strh	r3, [r4, #12]
 80039c8:	f04f 30ff 	mov.w	r0, #4294967295
 80039cc:	e7e9      	b.n	80039a2 <__ssputs_r+0x8a>
	...

080039d0 <_svfiprintf_r>:
 80039d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039d4:	4698      	mov	r8, r3
 80039d6:	898b      	ldrh	r3, [r1, #12]
 80039d8:	061b      	lsls	r3, r3, #24
 80039da:	b09d      	sub	sp, #116	@ 0x74
 80039dc:	4607      	mov	r7, r0
 80039de:	460d      	mov	r5, r1
 80039e0:	4614      	mov	r4, r2
 80039e2:	d510      	bpl.n	8003a06 <_svfiprintf_r+0x36>
 80039e4:	690b      	ldr	r3, [r1, #16]
 80039e6:	b973      	cbnz	r3, 8003a06 <_svfiprintf_r+0x36>
 80039e8:	2140      	movs	r1, #64	@ 0x40
 80039ea:	f7ff ff09 	bl	8003800 <_malloc_r>
 80039ee:	6028      	str	r0, [r5, #0]
 80039f0:	6128      	str	r0, [r5, #16]
 80039f2:	b930      	cbnz	r0, 8003a02 <_svfiprintf_r+0x32>
 80039f4:	230c      	movs	r3, #12
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	f04f 30ff 	mov.w	r0, #4294967295
 80039fc:	b01d      	add	sp, #116	@ 0x74
 80039fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a02:	2340      	movs	r3, #64	@ 0x40
 8003a04:	616b      	str	r3, [r5, #20]
 8003a06:	2300      	movs	r3, #0
 8003a08:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a0a:	2320      	movs	r3, #32
 8003a0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a10:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a14:	2330      	movs	r3, #48	@ 0x30
 8003a16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003bb4 <_svfiprintf_r+0x1e4>
 8003a1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a1e:	f04f 0901 	mov.w	r9, #1
 8003a22:	4623      	mov	r3, r4
 8003a24:	469a      	mov	sl, r3
 8003a26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a2a:	b10a      	cbz	r2, 8003a30 <_svfiprintf_r+0x60>
 8003a2c:	2a25      	cmp	r2, #37	@ 0x25
 8003a2e:	d1f9      	bne.n	8003a24 <_svfiprintf_r+0x54>
 8003a30:	ebba 0b04 	subs.w	fp, sl, r4
 8003a34:	d00b      	beq.n	8003a4e <_svfiprintf_r+0x7e>
 8003a36:	465b      	mov	r3, fp
 8003a38:	4622      	mov	r2, r4
 8003a3a:	4629      	mov	r1, r5
 8003a3c:	4638      	mov	r0, r7
 8003a3e:	f7ff ff6b 	bl	8003918 <__ssputs_r>
 8003a42:	3001      	adds	r0, #1
 8003a44:	f000 80a7 	beq.w	8003b96 <_svfiprintf_r+0x1c6>
 8003a48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a4a:	445a      	add	r2, fp
 8003a4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 809f 	beq.w	8003b96 <_svfiprintf_r+0x1c6>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a62:	f10a 0a01 	add.w	sl, sl, #1
 8003a66:	9304      	str	r3, [sp, #16]
 8003a68:	9307      	str	r3, [sp, #28]
 8003a6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a70:	4654      	mov	r4, sl
 8003a72:	2205      	movs	r2, #5
 8003a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a78:	484e      	ldr	r0, [pc, #312]	@ (8003bb4 <_svfiprintf_r+0x1e4>)
 8003a7a:	f7fc fbb1 	bl	80001e0 <memchr>
 8003a7e:	9a04      	ldr	r2, [sp, #16]
 8003a80:	b9d8      	cbnz	r0, 8003aba <_svfiprintf_r+0xea>
 8003a82:	06d0      	lsls	r0, r2, #27
 8003a84:	bf44      	itt	mi
 8003a86:	2320      	movmi	r3, #32
 8003a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a8c:	0711      	lsls	r1, r2, #28
 8003a8e:	bf44      	itt	mi
 8003a90:	232b      	movmi	r3, #43	@ 0x2b
 8003a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a96:	f89a 3000 	ldrb.w	r3, [sl]
 8003a9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a9c:	d015      	beq.n	8003aca <_svfiprintf_r+0xfa>
 8003a9e:	9a07      	ldr	r2, [sp, #28]
 8003aa0:	4654      	mov	r4, sl
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	f04f 0c0a 	mov.w	ip, #10
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003aae:	3b30      	subs	r3, #48	@ 0x30
 8003ab0:	2b09      	cmp	r3, #9
 8003ab2:	d94b      	bls.n	8003b4c <_svfiprintf_r+0x17c>
 8003ab4:	b1b0      	cbz	r0, 8003ae4 <_svfiprintf_r+0x114>
 8003ab6:	9207      	str	r2, [sp, #28]
 8003ab8:	e014      	b.n	8003ae4 <_svfiprintf_r+0x114>
 8003aba:	eba0 0308 	sub.w	r3, r0, r8
 8003abe:	fa09 f303 	lsl.w	r3, r9, r3
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	9304      	str	r3, [sp, #16]
 8003ac6:	46a2      	mov	sl, r4
 8003ac8:	e7d2      	b.n	8003a70 <_svfiprintf_r+0xa0>
 8003aca:	9b03      	ldr	r3, [sp, #12]
 8003acc:	1d19      	adds	r1, r3, #4
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	9103      	str	r1, [sp, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bfbb      	ittet	lt
 8003ad6:	425b      	neglt	r3, r3
 8003ad8:	f042 0202 	orrlt.w	r2, r2, #2
 8003adc:	9307      	strge	r3, [sp, #28]
 8003ade:	9307      	strlt	r3, [sp, #28]
 8003ae0:	bfb8      	it	lt
 8003ae2:	9204      	strlt	r2, [sp, #16]
 8003ae4:	7823      	ldrb	r3, [r4, #0]
 8003ae6:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ae8:	d10a      	bne.n	8003b00 <_svfiprintf_r+0x130>
 8003aea:	7863      	ldrb	r3, [r4, #1]
 8003aec:	2b2a      	cmp	r3, #42	@ 0x2a
 8003aee:	d132      	bne.n	8003b56 <_svfiprintf_r+0x186>
 8003af0:	9b03      	ldr	r3, [sp, #12]
 8003af2:	1d1a      	adds	r2, r3, #4
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	9203      	str	r2, [sp, #12]
 8003af8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003afc:	3402      	adds	r4, #2
 8003afe:	9305      	str	r3, [sp, #20]
 8003b00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003bc4 <_svfiprintf_r+0x1f4>
 8003b04:	7821      	ldrb	r1, [r4, #0]
 8003b06:	2203      	movs	r2, #3
 8003b08:	4650      	mov	r0, sl
 8003b0a:	f7fc fb69 	bl	80001e0 <memchr>
 8003b0e:	b138      	cbz	r0, 8003b20 <_svfiprintf_r+0x150>
 8003b10:	9b04      	ldr	r3, [sp, #16]
 8003b12:	eba0 000a 	sub.w	r0, r0, sl
 8003b16:	2240      	movs	r2, #64	@ 0x40
 8003b18:	4082      	lsls	r2, r0
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	3401      	adds	r4, #1
 8003b1e:	9304      	str	r3, [sp, #16]
 8003b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b24:	4824      	ldr	r0, [pc, #144]	@ (8003bb8 <_svfiprintf_r+0x1e8>)
 8003b26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b2a:	2206      	movs	r2, #6
 8003b2c:	f7fc fb58 	bl	80001e0 <memchr>
 8003b30:	2800      	cmp	r0, #0
 8003b32:	d036      	beq.n	8003ba2 <_svfiprintf_r+0x1d2>
 8003b34:	4b21      	ldr	r3, [pc, #132]	@ (8003bbc <_svfiprintf_r+0x1ec>)
 8003b36:	bb1b      	cbnz	r3, 8003b80 <_svfiprintf_r+0x1b0>
 8003b38:	9b03      	ldr	r3, [sp, #12]
 8003b3a:	3307      	adds	r3, #7
 8003b3c:	f023 0307 	bic.w	r3, r3, #7
 8003b40:	3308      	adds	r3, #8
 8003b42:	9303      	str	r3, [sp, #12]
 8003b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b46:	4433      	add	r3, r6
 8003b48:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b4a:	e76a      	b.n	8003a22 <_svfiprintf_r+0x52>
 8003b4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b50:	460c      	mov	r4, r1
 8003b52:	2001      	movs	r0, #1
 8003b54:	e7a8      	b.n	8003aa8 <_svfiprintf_r+0xd8>
 8003b56:	2300      	movs	r3, #0
 8003b58:	3401      	adds	r4, #1
 8003b5a:	9305      	str	r3, [sp, #20]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	f04f 0c0a 	mov.w	ip, #10
 8003b62:	4620      	mov	r0, r4
 8003b64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b68:	3a30      	subs	r2, #48	@ 0x30
 8003b6a:	2a09      	cmp	r2, #9
 8003b6c:	d903      	bls.n	8003b76 <_svfiprintf_r+0x1a6>
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0c6      	beq.n	8003b00 <_svfiprintf_r+0x130>
 8003b72:	9105      	str	r1, [sp, #20]
 8003b74:	e7c4      	b.n	8003b00 <_svfiprintf_r+0x130>
 8003b76:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b7a:	4604      	mov	r4, r0
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e7f0      	b.n	8003b62 <_svfiprintf_r+0x192>
 8003b80:	ab03      	add	r3, sp, #12
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	462a      	mov	r2, r5
 8003b86:	4b0e      	ldr	r3, [pc, #56]	@ (8003bc0 <_svfiprintf_r+0x1f0>)
 8003b88:	a904      	add	r1, sp, #16
 8003b8a:	4638      	mov	r0, r7
 8003b8c:	f3af 8000 	nop.w
 8003b90:	1c42      	adds	r2, r0, #1
 8003b92:	4606      	mov	r6, r0
 8003b94:	d1d6      	bne.n	8003b44 <_svfiprintf_r+0x174>
 8003b96:	89ab      	ldrh	r3, [r5, #12]
 8003b98:	065b      	lsls	r3, r3, #25
 8003b9a:	f53f af2d 	bmi.w	80039f8 <_svfiprintf_r+0x28>
 8003b9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ba0:	e72c      	b.n	80039fc <_svfiprintf_r+0x2c>
 8003ba2:	ab03      	add	r3, sp, #12
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	462a      	mov	r2, r5
 8003ba8:	4b05      	ldr	r3, [pc, #20]	@ (8003bc0 <_svfiprintf_r+0x1f0>)
 8003baa:	a904      	add	r1, sp, #16
 8003bac:	4638      	mov	r0, r7
 8003bae:	f000 f879 	bl	8003ca4 <_printf_i>
 8003bb2:	e7ed      	b.n	8003b90 <_svfiprintf_r+0x1c0>
 8003bb4:	0800414c 	.word	0x0800414c
 8003bb8:	08004156 	.word	0x08004156
 8003bbc:	00000000 	.word	0x00000000
 8003bc0:	08003919 	.word	0x08003919
 8003bc4:	08004152 	.word	0x08004152

08003bc8 <_printf_common>:
 8003bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bcc:	4616      	mov	r6, r2
 8003bce:	4698      	mov	r8, r3
 8003bd0:	688a      	ldr	r2, [r1, #8]
 8003bd2:	690b      	ldr	r3, [r1, #16]
 8003bd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	bfb8      	it	lt
 8003bdc:	4613      	movlt	r3, r2
 8003bde:	6033      	str	r3, [r6, #0]
 8003be0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003be4:	4607      	mov	r7, r0
 8003be6:	460c      	mov	r4, r1
 8003be8:	b10a      	cbz	r2, 8003bee <_printf_common+0x26>
 8003bea:	3301      	adds	r3, #1
 8003bec:	6033      	str	r3, [r6, #0]
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	0699      	lsls	r1, r3, #26
 8003bf2:	bf42      	ittt	mi
 8003bf4:	6833      	ldrmi	r3, [r6, #0]
 8003bf6:	3302      	addmi	r3, #2
 8003bf8:	6033      	strmi	r3, [r6, #0]
 8003bfa:	6825      	ldr	r5, [r4, #0]
 8003bfc:	f015 0506 	ands.w	r5, r5, #6
 8003c00:	d106      	bne.n	8003c10 <_printf_common+0x48>
 8003c02:	f104 0a19 	add.w	sl, r4, #25
 8003c06:	68e3      	ldr	r3, [r4, #12]
 8003c08:	6832      	ldr	r2, [r6, #0]
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	42ab      	cmp	r3, r5
 8003c0e:	dc26      	bgt.n	8003c5e <_printf_common+0x96>
 8003c10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c14:	6822      	ldr	r2, [r4, #0]
 8003c16:	3b00      	subs	r3, #0
 8003c18:	bf18      	it	ne
 8003c1a:	2301      	movne	r3, #1
 8003c1c:	0692      	lsls	r2, r2, #26
 8003c1e:	d42b      	bmi.n	8003c78 <_printf_common+0xb0>
 8003c20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c24:	4641      	mov	r1, r8
 8003c26:	4638      	mov	r0, r7
 8003c28:	47c8      	blx	r9
 8003c2a:	3001      	adds	r0, #1
 8003c2c:	d01e      	beq.n	8003c6c <_printf_common+0xa4>
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	6922      	ldr	r2, [r4, #16]
 8003c32:	f003 0306 	and.w	r3, r3, #6
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	bf02      	ittt	eq
 8003c3a:	68e5      	ldreq	r5, [r4, #12]
 8003c3c:	6833      	ldreq	r3, [r6, #0]
 8003c3e:	1aed      	subeq	r5, r5, r3
 8003c40:	68a3      	ldr	r3, [r4, #8]
 8003c42:	bf0c      	ite	eq
 8003c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c48:	2500      	movne	r5, #0
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	bfc4      	itt	gt
 8003c4e:	1a9b      	subgt	r3, r3, r2
 8003c50:	18ed      	addgt	r5, r5, r3
 8003c52:	2600      	movs	r6, #0
 8003c54:	341a      	adds	r4, #26
 8003c56:	42b5      	cmp	r5, r6
 8003c58:	d11a      	bne.n	8003c90 <_printf_common+0xc8>
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	e008      	b.n	8003c70 <_printf_common+0xa8>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	4652      	mov	r2, sl
 8003c62:	4641      	mov	r1, r8
 8003c64:	4638      	mov	r0, r7
 8003c66:	47c8      	blx	r9
 8003c68:	3001      	adds	r0, #1
 8003c6a:	d103      	bne.n	8003c74 <_printf_common+0xac>
 8003c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c74:	3501      	adds	r5, #1
 8003c76:	e7c6      	b.n	8003c06 <_printf_common+0x3e>
 8003c78:	18e1      	adds	r1, r4, r3
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	2030      	movs	r0, #48	@ 0x30
 8003c7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c82:	4422      	add	r2, r4
 8003c84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c8c:	3302      	adds	r3, #2
 8003c8e:	e7c7      	b.n	8003c20 <_printf_common+0x58>
 8003c90:	2301      	movs	r3, #1
 8003c92:	4622      	mov	r2, r4
 8003c94:	4641      	mov	r1, r8
 8003c96:	4638      	mov	r0, r7
 8003c98:	47c8      	blx	r9
 8003c9a:	3001      	adds	r0, #1
 8003c9c:	d0e6      	beq.n	8003c6c <_printf_common+0xa4>
 8003c9e:	3601      	adds	r6, #1
 8003ca0:	e7d9      	b.n	8003c56 <_printf_common+0x8e>
	...

08003ca4 <_printf_i>:
 8003ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca8:	7e0f      	ldrb	r7, [r1, #24]
 8003caa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003cac:	2f78      	cmp	r7, #120	@ 0x78
 8003cae:	4691      	mov	r9, r2
 8003cb0:	4680      	mov	r8, r0
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	469a      	mov	sl, r3
 8003cb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003cba:	d807      	bhi.n	8003ccc <_printf_i+0x28>
 8003cbc:	2f62      	cmp	r7, #98	@ 0x62
 8003cbe:	d80a      	bhi.n	8003cd6 <_printf_i+0x32>
 8003cc0:	2f00      	cmp	r7, #0
 8003cc2:	f000 80d2 	beq.w	8003e6a <_printf_i+0x1c6>
 8003cc6:	2f58      	cmp	r7, #88	@ 0x58
 8003cc8:	f000 80b9 	beq.w	8003e3e <_printf_i+0x19a>
 8003ccc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003cd4:	e03a      	b.n	8003d4c <_printf_i+0xa8>
 8003cd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003cda:	2b15      	cmp	r3, #21
 8003cdc:	d8f6      	bhi.n	8003ccc <_printf_i+0x28>
 8003cde:	a101      	add	r1, pc, #4	@ (adr r1, 8003ce4 <_printf_i+0x40>)
 8003ce0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ce4:	08003d3d 	.word	0x08003d3d
 8003ce8:	08003d51 	.word	0x08003d51
 8003cec:	08003ccd 	.word	0x08003ccd
 8003cf0:	08003ccd 	.word	0x08003ccd
 8003cf4:	08003ccd 	.word	0x08003ccd
 8003cf8:	08003ccd 	.word	0x08003ccd
 8003cfc:	08003d51 	.word	0x08003d51
 8003d00:	08003ccd 	.word	0x08003ccd
 8003d04:	08003ccd 	.word	0x08003ccd
 8003d08:	08003ccd 	.word	0x08003ccd
 8003d0c:	08003ccd 	.word	0x08003ccd
 8003d10:	08003e51 	.word	0x08003e51
 8003d14:	08003d7b 	.word	0x08003d7b
 8003d18:	08003e0b 	.word	0x08003e0b
 8003d1c:	08003ccd 	.word	0x08003ccd
 8003d20:	08003ccd 	.word	0x08003ccd
 8003d24:	08003e73 	.word	0x08003e73
 8003d28:	08003ccd 	.word	0x08003ccd
 8003d2c:	08003d7b 	.word	0x08003d7b
 8003d30:	08003ccd 	.word	0x08003ccd
 8003d34:	08003ccd 	.word	0x08003ccd
 8003d38:	08003e13 	.word	0x08003e13
 8003d3c:	6833      	ldr	r3, [r6, #0]
 8003d3e:	1d1a      	adds	r2, r3, #4
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6032      	str	r2, [r6, #0]
 8003d44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e09d      	b.n	8003e8c <_printf_i+0x1e8>
 8003d50:	6833      	ldr	r3, [r6, #0]
 8003d52:	6820      	ldr	r0, [r4, #0]
 8003d54:	1d19      	adds	r1, r3, #4
 8003d56:	6031      	str	r1, [r6, #0]
 8003d58:	0606      	lsls	r6, r0, #24
 8003d5a:	d501      	bpl.n	8003d60 <_printf_i+0xbc>
 8003d5c:	681d      	ldr	r5, [r3, #0]
 8003d5e:	e003      	b.n	8003d68 <_printf_i+0xc4>
 8003d60:	0645      	lsls	r5, r0, #25
 8003d62:	d5fb      	bpl.n	8003d5c <_printf_i+0xb8>
 8003d64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d68:	2d00      	cmp	r5, #0
 8003d6a:	da03      	bge.n	8003d74 <_printf_i+0xd0>
 8003d6c:	232d      	movs	r3, #45	@ 0x2d
 8003d6e:	426d      	negs	r5, r5
 8003d70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d74:	4859      	ldr	r0, [pc, #356]	@ (8003edc <_printf_i+0x238>)
 8003d76:	230a      	movs	r3, #10
 8003d78:	e011      	b.n	8003d9e <_printf_i+0xfa>
 8003d7a:	6821      	ldr	r1, [r4, #0]
 8003d7c:	6833      	ldr	r3, [r6, #0]
 8003d7e:	0608      	lsls	r0, r1, #24
 8003d80:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d84:	d402      	bmi.n	8003d8c <_printf_i+0xe8>
 8003d86:	0649      	lsls	r1, r1, #25
 8003d88:	bf48      	it	mi
 8003d8a:	b2ad      	uxthmi	r5, r5
 8003d8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d8e:	4853      	ldr	r0, [pc, #332]	@ (8003edc <_printf_i+0x238>)
 8003d90:	6033      	str	r3, [r6, #0]
 8003d92:	bf14      	ite	ne
 8003d94:	230a      	movne	r3, #10
 8003d96:	2308      	moveq	r3, #8
 8003d98:	2100      	movs	r1, #0
 8003d9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d9e:	6866      	ldr	r6, [r4, #4]
 8003da0:	60a6      	str	r6, [r4, #8]
 8003da2:	2e00      	cmp	r6, #0
 8003da4:	bfa2      	ittt	ge
 8003da6:	6821      	ldrge	r1, [r4, #0]
 8003da8:	f021 0104 	bicge.w	r1, r1, #4
 8003dac:	6021      	strge	r1, [r4, #0]
 8003dae:	b90d      	cbnz	r5, 8003db4 <_printf_i+0x110>
 8003db0:	2e00      	cmp	r6, #0
 8003db2:	d04b      	beq.n	8003e4c <_printf_i+0x1a8>
 8003db4:	4616      	mov	r6, r2
 8003db6:	fbb5 f1f3 	udiv	r1, r5, r3
 8003dba:	fb03 5711 	mls	r7, r3, r1, r5
 8003dbe:	5dc7      	ldrb	r7, [r0, r7]
 8003dc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003dc4:	462f      	mov	r7, r5
 8003dc6:	42bb      	cmp	r3, r7
 8003dc8:	460d      	mov	r5, r1
 8003dca:	d9f4      	bls.n	8003db6 <_printf_i+0x112>
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d10b      	bne.n	8003de8 <_printf_i+0x144>
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	07df      	lsls	r7, r3, #31
 8003dd4:	d508      	bpl.n	8003de8 <_printf_i+0x144>
 8003dd6:	6923      	ldr	r3, [r4, #16]
 8003dd8:	6861      	ldr	r1, [r4, #4]
 8003dda:	4299      	cmp	r1, r3
 8003ddc:	bfde      	ittt	le
 8003dde:	2330      	movle	r3, #48	@ 0x30
 8003de0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003de4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003de8:	1b92      	subs	r2, r2, r6
 8003dea:	6122      	str	r2, [r4, #16]
 8003dec:	f8cd a000 	str.w	sl, [sp]
 8003df0:	464b      	mov	r3, r9
 8003df2:	aa03      	add	r2, sp, #12
 8003df4:	4621      	mov	r1, r4
 8003df6:	4640      	mov	r0, r8
 8003df8:	f7ff fee6 	bl	8003bc8 <_printf_common>
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	d14a      	bne.n	8003e96 <_printf_i+0x1f2>
 8003e00:	f04f 30ff 	mov.w	r0, #4294967295
 8003e04:	b004      	add	sp, #16
 8003e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	f043 0320 	orr.w	r3, r3, #32
 8003e10:	6023      	str	r3, [r4, #0]
 8003e12:	4833      	ldr	r0, [pc, #204]	@ (8003ee0 <_printf_i+0x23c>)
 8003e14:	2778      	movs	r7, #120	@ 0x78
 8003e16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	6831      	ldr	r1, [r6, #0]
 8003e1e:	061f      	lsls	r7, r3, #24
 8003e20:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e24:	d402      	bmi.n	8003e2c <_printf_i+0x188>
 8003e26:	065f      	lsls	r7, r3, #25
 8003e28:	bf48      	it	mi
 8003e2a:	b2ad      	uxthmi	r5, r5
 8003e2c:	6031      	str	r1, [r6, #0]
 8003e2e:	07d9      	lsls	r1, r3, #31
 8003e30:	bf44      	itt	mi
 8003e32:	f043 0320 	orrmi.w	r3, r3, #32
 8003e36:	6023      	strmi	r3, [r4, #0]
 8003e38:	b11d      	cbz	r5, 8003e42 <_printf_i+0x19e>
 8003e3a:	2310      	movs	r3, #16
 8003e3c:	e7ac      	b.n	8003d98 <_printf_i+0xf4>
 8003e3e:	4827      	ldr	r0, [pc, #156]	@ (8003edc <_printf_i+0x238>)
 8003e40:	e7e9      	b.n	8003e16 <_printf_i+0x172>
 8003e42:	6823      	ldr	r3, [r4, #0]
 8003e44:	f023 0320 	bic.w	r3, r3, #32
 8003e48:	6023      	str	r3, [r4, #0]
 8003e4a:	e7f6      	b.n	8003e3a <_printf_i+0x196>
 8003e4c:	4616      	mov	r6, r2
 8003e4e:	e7bd      	b.n	8003dcc <_printf_i+0x128>
 8003e50:	6833      	ldr	r3, [r6, #0]
 8003e52:	6825      	ldr	r5, [r4, #0]
 8003e54:	6961      	ldr	r1, [r4, #20]
 8003e56:	1d18      	adds	r0, r3, #4
 8003e58:	6030      	str	r0, [r6, #0]
 8003e5a:	062e      	lsls	r6, r5, #24
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	d501      	bpl.n	8003e64 <_printf_i+0x1c0>
 8003e60:	6019      	str	r1, [r3, #0]
 8003e62:	e002      	b.n	8003e6a <_printf_i+0x1c6>
 8003e64:	0668      	lsls	r0, r5, #25
 8003e66:	d5fb      	bpl.n	8003e60 <_printf_i+0x1bc>
 8003e68:	8019      	strh	r1, [r3, #0]
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	6123      	str	r3, [r4, #16]
 8003e6e:	4616      	mov	r6, r2
 8003e70:	e7bc      	b.n	8003dec <_printf_i+0x148>
 8003e72:	6833      	ldr	r3, [r6, #0]
 8003e74:	1d1a      	adds	r2, r3, #4
 8003e76:	6032      	str	r2, [r6, #0]
 8003e78:	681e      	ldr	r6, [r3, #0]
 8003e7a:	6862      	ldr	r2, [r4, #4]
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4630      	mov	r0, r6
 8003e80:	f7fc f9ae 	bl	80001e0 <memchr>
 8003e84:	b108      	cbz	r0, 8003e8a <_printf_i+0x1e6>
 8003e86:	1b80      	subs	r0, r0, r6
 8003e88:	6060      	str	r0, [r4, #4]
 8003e8a:	6863      	ldr	r3, [r4, #4]
 8003e8c:	6123      	str	r3, [r4, #16]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e94:	e7aa      	b.n	8003dec <_printf_i+0x148>
 8003e96:	6923      	ldr	r3, [r4, #16]
 8003e98:	4632      	mov	r2, r6
 8003e9a:	4649      	mov	r1, r9
 8003e9c:	4640      	mov	r0, r8
 8003e9e:	47d0      	blx	sl
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	d0ad      	beq.n	8003e00 <_printf_i+0x15c>
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	079b      	lsls	r3, r3, #30
 8003ea8:	d413      	bmi.n	8003ed2 <_printf_i+0x22e>
 8003eaa:	68e0      	ldr	r0, [r4, #12]
 8003eac:	9b03      	ldr	r3, [sp, #12]
 8003eae:	4298      	cmp	r0, r3
 8003eb0:	bfb8      	it	lt
 8003eb2:	4618      	movlt	r0, r3
 8003eb4:	e7a6      	b.n	8003e04 <_printf_i+0x160>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	4632      	mov	r2, r6
 8003eba:	4649      	mov	r1, r9
 8003ebc:	4640      	mov	r0, r8
 8003ebe:	47d0      	blx	sl
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	d09d      	beq.n	8003e00 <_printf_i+0x15c>
 8003ec4:	3501      	adds	r5, #1
 8003ec6:	68e3      	ldr	r3, [r4, #12]
 8003ec8:	9903      	ldr	r1, [sp, #12]
 8003eca:	1a5b      	subs	r3, r3, r1
 8003ecc:	42ab      	cmp	r3, r5
 8003ece:	dcf2      	bgt.n	8003eb6 <_printf_i+0x212>
 8003ed0:	e7eb      	b.n	8003eaa <_printf_i+0x206>
 8003ed2:	2500      	movs	r5, #0
 8003ed4:	f104 0619 	add.w	r6, r4, #25
 8003ed8:	e7f5      	b.n	8003ec6 <_printf_i+0x222>
 8003eda:	bf00      	nop
 8003edc:	0800415d 	.word	0x0800415d
 8003ee0:	0800416e 	.word	0x0800416e

08003ee4 <memmove>:
 8003ee4:	4288      	cmp	r0, r1
 8003ee6:	b510      	push	{r4, lr}
 8003ee8:	eb01 0402 	add.w	r4, r1, r2
 8003eec:	d902      	bls.n	8003ef4 <memmove+0x10>
 8003eee:	4284      	cmp	r4, r0
 8003ef0:	4623      	mov	r3, r4
 8003ef2:	d807      	bhi.n	8003f04 <memmove+0x20>
 8003ef4:	1e43      	subs	r3, r0, #1
 8003ef6:	42a1      	cmp	r1, r4
 8003ef8:	d008      	beq.n	8003f0c <memmove+0x28>
 8003efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003efe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f02:	e7f8      	b.n	8003ef6 <memmove+0x12>
 8003f04:	4402      	add	r2, r0
 8003f06:	4601      	mov	r1, r0
 8003f08:	428a      	cmp	r2, r1
 8003f0a:	d100      	bne.n	8003f0e <memmove+0x2a>
 8003f0c:	bd10      	pop	{r4, pc}
 8003f0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f16:	e7f7      	b.n	8003f08 <memmove+0x24>

08003f18 <_sbrk_r>:
 8003f18:	b538      	push	{r3, r4, r5, lr}
 8003f1a:	4d06      	ldr	r5, [pc, #24]	@ (8003f34 <_sbrk_r+0x1c>)
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	4604      	mov	r4, r0
 8003f20:	4608      	mov	r0, r1
 8003f22:	602b      	str	r3, [r5, #0]
 8003f24:	f7fc ff5c 	bl	8000de0 <_sbrk>
 8003f28:	1c43      	adds	r3, r0, #1
 8003f2a:	d102      	bne.n	8003f32 <_sbrk_r+0x1a>
 8003f2c:	682b      	ldr	r3, [r5, #0]
 8003f2e:	b103      	cbz	r3, 8003f32 <_sbrk_r+0x1a>
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	bd38      	pop	{r3, r4, r5, pc}
 8003f34:	2000026c 	.word	0x2000026c

08003f38 <memcpy>:
 8003f38:	440a      	add	r2, r1
 8003f3a:	4291      	cmp	r1, r2
 8003f3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f40:	d100      	bne.n	8003f44 <memcpy+0xc>
 8003f42:	4770      	bx	lr
 8003f44:	b510      	push	{r4, lr}
 8003f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f4e:	4291      	cmp	r1, r2
 8003f50:	d1f9      	bne.n	8003f46 <memcpy+0xe>
 8003f52:	bd10      	pop	{r4, pc}

08003f54 <_realloc_r>:
 8003f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f58:	4680      	mov	r8, r0
 8003f5a:	4615      	mov	r5, r2
 8003f5c:	460c      	mov	r4, r1
 8003f5e:	b921      	cbnz	r1, 8003f6a <_realloc_r+0x16>
 8003f60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f64:	4611      	mov	r1, r2
 8003f66:	f7ff bc4b 	b.w	8003800 <_malloc_r>
 8003f6a:	b92a      	cbnz	r2, 8003f78 <_realloc_r+0x24>
 8003f6c:	f7ff fbdc 	bl	8003728 <_free_r>
 8003f70:	2400      	movs	r4, #0
 8003f72:	4620      	mov	r0, r4
 8003f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f78:	f000 f81a 	bl	8003fb0 <_malloc_usable_size_r>
 8003f7c:	4285      	cmp	r5, r0
 8003f7e:	4606      	mov	r6, r0
 8003f80:	d802      	bhi.n	8003f88 <_realloc_r+0x34>
 8003f82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003f86:	d8f4      	bhi.n	8003f72 <_realloc_r+0x1e>
 8003f88:	4629      	mov	r1, r5
 8003f8a:	4640      	mov	r0, r8
 8003f8c:	f7ff fc38 	bl	8003800 <_malloc_r>
 8003f90:	4607      	mov	r7, r0
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d0ec      	beq.n	8003f70 <_realloc_r+0x1c>
 8003f96:	42b5      	cmp	r5, r6
 8003f98:	462a      	mov	r2, r5
 8003f9a:	4621      	mov	r1, r4
 8003f9c:	bf28      	it	cs
 8003f9e:	4632      	movcs	r2, r6
 8003fa0:	f7ff ffca 	bl	8003f38 <memcpy>
 8003fa4:	4621      	mov	r1, r4
 8003fa6:	4640      	mov	r0, r8
 8003fa8:	f7ff fbbe 	bl	8003728 <_free_r>
 8003fac:	463c      	mov	r4, r7
 8003fae:	e7e0      	b.n	8003f72 <_realloc_r+0x1e>

08003fb0 <_malloc_usable_size_r>:
 8003fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fb4:	1f18      	subs	r0, r3, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	bfbc      	itt	lt
 8003fba:	580b      	ldrlt	r3, [r1, r0]
 8003fbc:	18c0      	addlt	r0, r0, r3
 8003fbe:	4770      	bx	lr

08003fc0 <_init>:
 8003fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc2:	bf00      	nop
 8003fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fc6:	bc08      	pop	{r3}
 8003fc8:	469e      	mov	lr, r3
 8003fca:	4770      	bx	lr

08003fcc <_fini>:
 8003fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fce:	bf00      	nop
 8003fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fd2:	bc08      	pop	{r3}
 8003fd4:	469e      	mov	lr, r3
 8003fd6:	4770      	bx	lr
